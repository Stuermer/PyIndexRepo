{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PyIndexRepo Overview PyIndexRepo is a Python package that provides a simple interface to the refractive index database at refractiveindex.info . There are two main classes in the package: RefractiveIndexLibrary : This class provides access to the refractive index database. It allows you to search for materials e.g. by name or refractive index. Material : This class represents a material with its refractive index data. It provides methods to calculate the refractive index at any given wavelength based on the available data. It is possible to use custom data for the calculation or to use one of the implemented dispersion formulas. For details on the available methods, see the API documentation . Usage Here is a simple example of how to use the package: from pyindexrepo import RefractiveIndexLibrary # Create a database object db = RefractiveIndexLibrary() # Search for a material bk7 = db.search_material_by_page_name('N-BK7') # returns a list of different BK7 glasses Now, bk7 is a list of Material objects, we can access further information about the material: for glass in bk7: print(glass) Let's say we are interested in the first glass in the list, we can access the refractive index data: print(bk7.get_n(0.5875618)) # get the refractive index at 587.5618 nm bk7.get_n(np.linspace(0.4, 0.8, 100)) # get the refractive index for a range of wavelengths The Material package can be used to generate custom materials: Let's say we want to create a custom material with certain sellmeier coefficients: from pyindexrepo import Material, FormulaIndexData from pyindexrepo.dispersion_formulas import formula_2 # the formula_2 is one particular implementation of the sellmeier formula. Check the documentation for more options. # Create a custom material with sellmeier coefficients (B1, B2, B3, C1, C2, C3) = (1.5, 0.1, 0.2, 0.3, 0.4, 0.5) custom_material = Material(FormulaIndexData(formula_2, [1.5, 0.1, 0.2, 0.3, 0.4, 0.5])) print(custom_material.get_n(0.5875618)) # get the refractive index at 587.5618 nm Note: The refractive index is calculated using the formula provided. The formula should be a function that takes the wavelength and the coefficients as arguments and returns the refractive index. It can be a custom function or one of the implemented dispersion formulas. These formulas are implemented in the pyindexrepo.dispersion_formulas module and are speed-optimized using the numba library. Installation Installing the package is done via pip: pip install pyindexrepo","title":"Home"},{"location":"#welcome-to-pyindexrepo","text":"","title":"Welcome to PyIndexRepo"},{"location":"#overview","text":"PyIndexRepo is a Python package that provides a simple interface to the refractive index database at refractiveindex.info . There are two main classes in the package: RefractiveIndexLibrary : This class provides access to the refractive index database. It allows you to search for materials e.g. by name or refractive index. Material : This class represents a material with its refractive index data. It provides methods to calculate the refractive index at any given wavelength based on the available data. It is possible to use custom data for the calculation or to use one of the implemented dispersion formulas. For details on the available methods, see the API documentation .","title":"Overview"},{"location":"#usage","text":"Here is a simple example of how to use the package: from pyindexrepo import RefractiveIndexLibrary # Create a database object db = RefractiveIndexLibrary() # Search for a material bk7 = db.search_material_by_page_name('N-BK7') # returns a list of different BK7 glasses Now, bk7 is a list of Material objects, we can access further information about the material: for glass in bk7: print(glass) Let's say we are interested in the first glass in the list, we can access the refractive index data: print(bk7.get_n(0.5875618)) # get the refractive index at 587.5618 nm bk7.get_n(np.linspace(0.4, 0.8, 100)) # get the refractive index for a range of wavelengths The Material package can be used to generate custom materials: Let's say we want to create a custom material with certain sellmeier coefficients: from pyindexrepo import Material, FormulaIndexData from pyindexrepo.dispersion_formulas import formula_2 # the formula_2 is one particular implementation of the sellmeier formula. Check the documentation for more options. # Create a custom material with sellmeier coefficients (B1, B2, B3, C1, C2, C3) = (1.5, 0.1, 0.2, 0.3, 0.4, 0.5) custom_material = Material(FormulaIndexData(formula_2, [1.5, 0.1, 0.2, 0.3, 0.4, 0.5])) print(custom_material.get_n(0.5875618)) # get the refractive index at 587.5618 nm Note: The refractive index is calculated using the formula provided. The formula should be a function that takes the wavelength and the coefficients as arguments and returns the refractive index. It can be a custom function or one of the implemented dispersion formulas. These formulas are implemented in the pyindexrepo.dispersion_formulas module and are speed-optimized using the numba library.","title":"Usage"},{"location":"#installation","text":"Installing the package is done via pip: pip install pyindexrepo","title":"Installation"},{"location":"api/","text":"FormulaIndexData dataclass A dataclass representing formula-based index data. Attributes: formula ( callable ) \u2013 A callable function that computes the refractive index (n) or extinction coefficient (k) for a given wavelength. coefficients ( array ) \u2013 An array of coefficients required by the formula function. min_wl ( float ) \u2013 The minimum wavelength (in nm) for which the formula is valid. Default is negative infinity. max_wl ( float ) \u2013 The maximum wavelength (in nm) for which the formula is valid. Default is positive infinity. Source code in pyindexrepo/main.py @dataclass class FormulaIndexData: \"\"\" A dataclass representing formula-based index data. Attributes: formula (callable): A callable function that computes the refractive index (n) or extinction coefficient (k) for a given wavelength. coefficients (np.array): An array of coefficients required by the formula function. min_wl (float, optional): The minimum wavelength (in nm) for which the formula is valid. Default is negative infinity. max_wl (float, optional): The maximum wavelength (in nm) for which the formula is valid. Default is positive infinity. \"\"\" formula: callable coefficients: np.array min_wl: float = field(default=-np.inf) max_wl: float = field(default=np.inf) def __post_init__(self): self.coefficients = np.array(self.coefficients, dtype=float) def get_n_or_k(self, wavelength: float | np.ndarray) -> float | np.ndarray: if isinstance(wavelength, float) or isinstance(wavelength, np.ndarray): return self.formula(wavelength, self.coefficients) elif isinstance(wavelength, list): return self.formula(np.array(wavelength), self.coefficients) else: raise ValueError(f\"The datatype {type(wavelength)} is not supported.\") Material dataclass A dataclass representing a material's properties. Attributes: n ( TabulatedIndexData | FormulaIndexData | None ) \u2013 The refractive index (n) data for the material. It can be an instance of TabulatedIndexData or FormulaIndexData, or None if unspecified. k ( TabulatedIndexData | FormulaIndexData | None ) \u2013 The extinction coefficient (k) data for the material. It can be an instance of TabulatedIndexData or FormulaIndexData, or None if unspecified. specs ( Specs | None ) \u2013 An instance of the Specs dataclass representing material specifications. None if unspecified. yaml_data ( YAMLLibraryData ) \u2013 An instance of the YAMLLibraryData class representing YAML library data. None if unspecified. Source code in pyindexrepo/main.py @dataclass class Material: \"\"\" A dataclass representing a material's properties. Attributes: n (TabulatedIndexData | FormulaIndexData | None, optional): The refractive index (n) data for the material. It can be an instance of TabulatedIndexData or FormulaIndexData, or None if unspecified. k (TabulatedIndexData | FormulaIndexData | None, optional): The extinction coefficient (k) data for the material. It can be an instance of TabulatedIndexData or FormulaIndexData, or None if unspecified. specs (Specs | None, optional): An instance of the Specs dataclass representing material specifications. None if unspecified. yaml_data (YAMLLibraryData, optional): An instance of the YAMLLibraryData class representing YAML library data. None if unspecified. \"\"\" n: TabulatedIndexData | FormulaIndexData | None = field(default=None) k: TabulatedIndexData | FormulaIndexData | None = field(default=None) specs: Specs | None = field(default=None) yaml_data: YAMLLibraryData = field(default=None) def get_n(self, wavelength: float | np.ndarray) -> float | np.ndarray: \"\"\"Get refractive index n for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. Returns: float or array of floats: Refractive index n for the given wavelength \"\"\" if self.n is None: warnings.warn(\"No n data. Returning 0\") return np.zeros_like(wavelength) return self.n.get_n_or_k(wavelength) def get_k(self, wavelength: float | np.ndarray) -> float | np.ndarray: \"\"\"Get extinction coefficient k for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. Returns: float or array of floats: Extinction coefficient k for the given wavelength \"\"\" if self.k is None: warnings.warn(\"No k data. Returning 0\") return np.zeros_like(wavelength) return self.k.get_n_or_k(wavelength) def get_nk(self, wavelength: float | np.ndarray) -> tuple[float | np.ndarray, float | np.ndarray]: \"\"\"Get refractive index n and extinction coefficient k for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. Returns: tuple of floats or arrays of floats: Refractive index n and extinction coefficient k for the given wavelength \"\"\" return self.get_n(wavelength), self.get_k(wavelength) def get_n_at_temperature( self, wavelength: float | np.ndarray, temperature: float, P: float = 0.10133 ) -> float | np.ndarray: \"\"\"Get refractive index n at a given temperature for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. temperature: Temperature in degrees P: Pressure in MPa. Default is 0.10133 MPa (1 atm). Returns: float or array of floats: Refractive index n at the given temperature for the given wavelength \"\"\" assert self.specs is not None, \"There are no specs available for this material\" assert self.specs.thermal_expansion is not None, ( \"There is no thermal dispersion formula available \" \"for this material\" ) if self.specs.wavelength_is_vacuum: n_abs = self.get_n(wavelength) return n_abs + self.specs.thermal_dispersion.delta_n_abs( n_abs, wavelength, temperature - self.specs.temperature, self.specs.thermal_dispersion.coefficients, ) else: rel_wavelength = ( wavelength * dispersion_formulas.n_air(wavelength, temperature, P) / dispersion_formulas.n_air(wavelength) ) n_rel = self.get_n(rel_wavelength) n_abs = dispersion_formulas.relative_to_absolute( n_rel, rel_wavelength, self.specs.temperature, 0.10133 ) n_abs += self.specs.thermal_dispersion.delta_n_abs( n_abs, rel_wavelength, temperature - self.specs.temperature, *self.specs.thermal_dispersion.coefficients, ) return dispersion_formulas.absolute_to_relative( n_abs, rel_wavelength, temperature, P ) def __str__(self): return self.yaml_data.name def __repr__(self): return self.yaml_data.name get_k(wavelength) Get extinction coefficient k for a given wavelength or array of wavelengths. Parameters: wavelength ( float | ndarray ) \u2013 Wavelength or array of wavelengths in micrometers. Returns: float | ndarray \u2013 float or array of floats: Extinction coefficient k for the given wavelength Source code in pyindexrepo/main.py def get_k(self, wavelength: float | np.ndarray) -> float | np.ndarray: \"\"\"Get extinction coefficient k for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. Returns: float or array of floats: Extinction coefficient k for the given wavelength \"\"\" if self.k is None: warnings.warn(\"No k data. Returning 0\") return np.zeros_like(wavelength) return self.k.get_n_or_k(wavelength) get_n(wavelength) Get refractive index n for a given wavelength or array of wavelengths. Parameters: wavelength ( float | ndarray ) \u2013 Wavelength or array of wavelengths in micrometers. Returns: float | ndarray \u2013 float or array of floats: Refractive index n for the given wavelength Source code in pyindexrepo/main.py def get_n(self, wavelength: float | np.ndarray) -> float | np.ndarray: \"\"\"Get refractive index n for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. Returns: float or array of floats: Refractive index n for the given wavelength \"\"\" if self.n is None: warnings.warn(\"No n data. Returning 0\") return np.zeros_like(wavelength) return self.n.get_n_or_k(wavelength) get_n_at_temperature(wavelength, temperature, P=0.10133) Get refractive index n at a given temperature for a given wavelength or array of wavelengths. Parameters: wavelength ( float | ndarray ) \u2013 Wavelength or array of wavelengths in micrometers. temperature ( float ) \u2013 Temperature in degrees P ( float , default: 0.10133 ) \u2013 Pressure in MPa. Default is 0.10133 MPa (1 atm). Returns: float | ndarray \u2013 float or array of floats: Refractive index n at the given temperature for the given wavelength Source code in pyindexrepo/main.py def get_n_at_temperature( self, wavelength: float | np.ndarray, temperature: float, P: float = 0.10133 ) -> float | np.ndarray: \"\"\"Get refractive index n at a given temperature for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. temperature: Temperature in degrees P: Pressure in MPa. Default is 0.10133 MPa (1 atm). Returns: float or array of floats: Refractive index n at the given temperature for the given wavelength \"\"\" assert self.specs is not None, \"There are no specs available for this material\" assert self.specs.thermal_expansion is not None, ( \"There is no thermal dispersion formula available \" \"for this material\" ) if self.specs.wavelength_is_vacuum: n_abs = self.get_n(wavelength) return n_abs + self.specs.thermal_dispersion.delta_n_abs( n_abs, wavelength, temperature - self.specs.temperature, self.specs.thermal_dispersion.coefficients, ) else: rel_wavelength = ( wavelength * dispersion_formulas.n_air(wavelength, temperature, P) / dispersion_formulas.n_air(wavelength) ) n_rel = self.get_n(rel_wavelength) n_abs = dispersion_formulas.relative_to_absolute( n_rel, rel_wavelength, self.specs.temperature, 0.10133 ) n_abs += self.specs.thermal_dispersion.delta_n_abs( n_abs, rel_wavelength, temperature - self.specs.temperature, *self.specs.thermal_dispersion.coefficients, ) return dispersion_formulas.absolute_to_relative( n_abs, rel_wavelength, temperature, P ) get_nk(wavelength) Get refractive index n and extinction coefficient k for a given wavelength or array of wavelengths. Parameters: wavelength ( float | ndarray ) \u2013 Wavelength or array of wavelengths in micrometers. Returns: tuple [ float | ndarray , float | ndarray ] \u2013 tuple of floats or arrays of floats: Refractive index n and extinction coefficient k for the given wavelength Source code in pyindexrepo/main.py def get_nk(self, wavelength: float | np.ndarray) -> tuple[float | np.ndarray, float | np.ndarray]: \"\"\"Get refractive index n and extinction coefficient k for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. Returns: tuple of floats or arrays of floats: Refractive index n and extinction coefficient k for the given wavelength \"\"\" return self.get_n(wavelength), self.get_k(wavelength) RefractiveIndexLibrary dataclass The dataclass representing the refractive index library using data from RefractiveIndex.info. Attributes: path_to_library ( Path ) \u2013 The path to the refractive index library YAML file. Default is a path pointing to a default library file. auto_upgrade ( bool ) \u2013 Automatically upgrade the library when initialized if set to True. Default is False. force_upgrade ( bool ) \u2013 Forcefully upgrade the library even if not necessary if set to True. Default is False. materials_yaml ( ( List [ YAMLLibraryData ], read - only ) ) \u2013 A list of YAML library data instances representing materials. materials_dict ( ( Dict [ str , Dict [ str , Dict [ str , Material ]]], read - only ) ) \u2013 A dictionary of materials organized by catalog, category, and name. materials_list ( ( List [ Material ], read - only ) ) \u2013 A list of all materials contained in the library. github_sha ( ( str , read - only ) ) \u2013 The GitHub SHA corresponding to the version of the library data. Source code in pyindexrepo/main.py @dataclass class RefractiveIndexLibrary: \"\"\" The dataclass representing the refractive index library using data from RefractiveIndex.info. Attributes: path_to_library (Path, optional): The path to the refractive index library YAML file. Default is a path pointing to a default library file. auto_upgrade (bool, optional): Automatically upgrade the library when initialized if set to True. Default is False. force_upgrade (bool, optional): Forcefully upgrade the library even if not necessary if set to True. Default is False. materials_yaml (List[YAMLLibraryData], read-only): A list of YAML library data instances representing materials. materials_dict (Dict[str, Dict[str, Dict[str, Material]]], read-only): A dictionary of materials organized by catalog, category, and name. materials_list (List[Material], read-only): A list of all materials contained in the library. github_sha (str, read-only): The GitHub SHA corresponding to the version of the library data. \"\"\" path_to_library: Path = field( default=Path(__file__) .absolute() .parent.parent.joinpath(\"database/catalog-nk.yml\") ) auto_upgrade: bool = field(default=False) force_upgrade: bool = field(default=False) materials_yaml: list[YAMLLibraryData] = field(default_factory=list, init=False) materials_dict: dict[str, dict[str, dict[str, Material]]] = field( default_factory=dict, init=False ) materials_list: list[Material] = field(default_factory=list, init=False) github_sha: str = field(default=\"\", init=False) def _is_library_outdated(self) -> bool: \"\"\"Checks if local library is outdated\"\"\" if self.path_to_library.parent.joinpath(\".local_sha\").exists(): # get local commit hash with open(self.path_to_library.parent.joinpath(\".local_sha\"), \"r\") as file: local_sha = file.readline() # get current commit hash on GitHub try: self.github_sha = requests.get( \"https://api.github.com/repos/polyanskiy/refractiveindex.info-database/commits/master\" ).json()[\"sha\"] except KeyError: logger.warning( \"Couldn't get SHA commit hash on GitHub. Database can not be updated.\" ) self.github_sha = \"\" return False return not (self.github_sha == local_sha) else: logger.info(\"No local library exists.\") return True def _download_latest_commit(self) -> bool: \"\"\"Download latest library from GitHub. Downloads the latest library from the refractiveindex.info GitHub repository and extracts the necessary data files. Returns: bool: True if the library was successfully downloaded, False otherwise. \"\"\" if self._is_library_outdated() or self.force_upgrade: logger.info(\"New Library available... Downloading...\") zip_url = \"https://api.github.com/repos/polyanskiy/refractiveindex.info-database/zipball\" response = requests.get(zip_url) with open(self.path_to_library.with_suffix(\".zip\"), \"wb\") as file: file.write(response.content) with zipfile.ZipFile(self.path_to_library.with_suffix(\".zip\"), \"r\") as file: file_list = file.namelist() subfolder_files = [ file for file in file_list if file.startswith(f\"{file_list[0]}database/data-nk\") and file.endswith(\".yml\") ] subfolder_files.append(f\"{file_list[0]}database/catalog-nk.yml\") for fn in subfolder_files: logger.debug(fn) # create a new Path object for the file to extract extract_path = self.path_to_library.parent / Path( \"/\".join(Path(fn).parts[2:]) ) extract_path.parent.mkdir(parents=True, exist_ok=True) # open the file in the zipfile and write it to disk with file.open(fn) as zf, extract_path.open(\"wb\") as of: of.write(zf.read()) with open(self.path_to_library.parent.joinpath(\".local_sha\"), \"w\") as file: file.write(self.github_sha) return True else: return False def _load_from_yaml(self): \"\"\"Load data from yaml file for internal use Returns: None \"\"\" logger.info(\"load from yaml\") with open(self.path_to_library) as f: yaml_data = yaml.safe_load(f) for s in yaml_data: for book in s[\"content\"]: if \"BOOK\" not in book: continue for page in book[\"content\"]: if \"PAGE\" not in page: continue # fill yaml list self.materials_yaml.append( YAMLLibraryData( name=page[\"name\"], lib_page=page[\"PAGE\"], lib_book=book[\"BOOK\"], lib_shelf=s[\"SHELF\"], lib_data=page[\"data\"], lib_path=self.path_to_library.parent.joinpath( \"data-nk\" ).joinpath(page[\"data\"]), ) ) def _convert_to_material_dict(self): \"\"\"Convert yaml data to Material objects Returns: None \"\"\" for m in self.materials_yaml: # try to load material from yaml mat = yaml_to_material(self.path_to_library.parent.joinpath(\"data-nk\").joinpath(m.lib_data), m.lib_shelf, m.lib_book, m.lib_page, m.name) if mat: # add material to dict, use shelf, book and page as keys self.materials_dict.setdefault(m.lib_shelf, {}).setdefault(m.lib_book, {}).update({m.lib_page: mat}) self.materials_list.append(self.materials_dict[m.lib_shelf][m.lib_book][m.lib_page]) with open(self.path_to_library.with_suffix(\".pickle\"), \"wb\") as f: pickle.dump(self.materials_yaml, f, pickle.HIGHEST_PROTOCOL) with open(self.path_to_library.with_suffix(\".pickle2\"), \"wb\") as f: pickle.dump(self.materials_dict, f, pickle.HIGHEST_PROTOCOL) def _load_from_pickle(self): logger.info(\"load from pickle\") t1 = time.time() with open(self.path_to_library.with_suffix(\".pickle\"), \"rb\") as f: self.materials_yaml = pickle.load(f) with open(self.path_to_library.with_suffix(\".pickle2\"), \"rb\") as f: self.materials_dict = pickle.load(f) for sd in self.materials_dict.values(): for bd in sd.values(): for mat in bd.values(): self.materials_list.append(mat) logger.info(f\"... done after{t1-time.time()}s\") def __post_init__(self): upgraded = False # create database folder if it doesn't exist if not self.path_to_library.parent.is_dir(): self.path_to_library.parent.mkdir() if self.auto_upgrade or self.force_upgrade: upgraded = self._download_latest_commit() if self.path_to_library.exists(): if self.path_to_library.with_suffix(\".pickle\").exists() and not upgraded: self._load_from_pickle() else: self._load_from_yaml() self._convert_to_material_dict() else: warnings.warn( \"Path to library does not exist! Please check path or activate auto_upgrade to download.\" ) def search_material_by_page_name( self, page_name: str, exact_match: bool = False ) -> Material | list[Material] | None: \"\"\"Search Material by name Search a Material by page name as given at refractiveindex.info. Sometimes, the name is not unique, so the function returns either a single Material or a list of Materials or None if it doesn't find a match. Args: page_name: name of the material as given as page name on refractiveindex.info exact_match: if True, only exact matches are considered. Default is False. e.g. if False, 'BK7' will return all BK7 glasses, including N-BK7, K-BK7, etc. Returns: Material or list of Materials matching the Name Examples: >>> db = RefractiveIndexLibrary() >>> bk7 = db.search_material_by_page_name('N-BK7')[0] # returns a list of different BK7 glasses >>> print(bk7.get_n(0.5875618)) 1.5168000345005885 \"\"\" materials = [] if exact_match: for m in self.materials_list: if page_name == m.yaml_data.name: materials.append(m) else: for m in self.materials_list: if page_name in m.yaml_data.name: materials.append(m) return ( materials[0] if len(materials) == 1 else materials if len(materials) > 1 else None ) def search_material_by_n( self, n: float, wl: float = 0.5875618, filter_shelf: str | None = None, filter_book: str | None = None, ) -> list[Material]: \"\"\"Search Material by refractive index Look for a material with a specific refractive index at a certain wavelength. In return, you get a sorted list of materials with index [0] being the closest to input n. Args: n: refractive index wl: wavelength filter_shelf: if given, only materials containing this string in their shelf name are considered filter_book: if given, only materials containing this string in their book name are considered Examples: >>> db = RefractiveIndexLibrary() >>> # get 3 closest OHARA glasses with n=1.5 at 0.55microns: >>> materials = db.search_material_by_n(1.5, wl=0.55, filter_book=\"ohara\")[:3] >>> print(materials[0].yaml_data.name, materials[0].get_n(0.55)) BSL3 1.4999474387027893 >>> print(materials[1].yaml_data.name, materials[1].get_n(0.55)) S-FPL51Y 1.498313496038896 >>> print(materials[2].yaml_data.name, materials[2].get_n(0.55)) S-FPL51 1.498303051383454 Returns: sorted list of materials matching search criteria \"\"\" materials = [] materials_n_distance = [] for shelf_m, d in self.materials_dict.items(): if not (shelf_m == filter_shelf or filter_shelf is None): continue for book_name, book_m in d.items(): if filter_book is not None: if filter_book.lower() not in book_name.lower(): continue for mat in book_m.values(): materials.append(mat) try: materials_n_distance.append(abs(mat.get_n(wl) - n)) except ValueError: materials_n_distance.append(99) return [ x for _, x in sorted( zip(materials_n_distance, materials), key=lambda pair: pair[0] ) ] def get_material(self, shelf: str, book: str, page: str) -> Material: \"\"\"Get Material by shelf, book, page name Select Material by specifying shelf, book and page as given on refractiveindex.info Args: shelf: shelf name book: book name page: page name Returns: Material object Examples: >>> db = RefractiveIndexLibrary() >>> bk7 = db.get_material(\"glass\", \"SCHOTT-BK\", \"N-BK7\") >>> print(bk7.get_n(0.5875618)) 1.5168000345005885 \"\"\" return self.materials_dict[shelf][book][page] def get_material_by_path(self, yaml_path: str) -> Material: \"\"\"Get material by path Args: yaml_path: path as shown on refractive index when hovered over 'CSV - comma separated data' Returns: Material object \"\"\" mat_found = [ m for m in self.materials_list if str(m.yaml_data.lib_path).lower().endswith(yaml_path.lower() + \".yml\") ] return mat_found[0] if mat_found else None get_material(shelf, book, page) Get Material by shelf, book, page name Select Material by specifying shelf, book and page as given on refractiveindex.info Parameters: shelf ( str ) \u2013 shelf name book ( str ) \u2013 book name page ( str ) \u2013 page name Returns: Material \u2013 Material object Examples: >>> db = RefractiveIndexLibrary() >>> bk7 = db.get_material(\"glass\", \"SCHOTT-BK\", \"N-BK7\") >>> print(bk7.get_n(0.5875618)) 1.5168000345005885 Source code in pyindexrepo/main.py def get_material(self, shelf: str, book: str, page: str) -> Material: \"\"\"Get Material by shelf, book, page name Select Material by specifying shelf, book and page as given on refractiveindex.info Args: shelf: shelf name book: book name page: page name Returns: Material object Examples: >>> db = RefractiveIndexLibrary() >>> bk7 = db.get_material(\"glass\", \"SCHOTT-BK\", \"N-BK7\") >>> print(bk7.get_n(0.5875618)) 1.5168000345005885 \"\"\" return self.materials_dict[shelf][book][page] get_material_by_path(yaml_path) Get material by path Parameters: yaml_path ( str ) \u2013 path as shown on refractive index when hovered over 'CSV - comma separated data' Returns: Material \u2013 Material object Source code in pyindexrepo/main.py def get_material_by_path(self, yaml_path: str) -> Material: \"\"\"Get material by path Args: yaml_path: path as shown on refractive index when hovered over 'CSV - comma separated data' Returns: Material object \"\"\" mat_found = [ m for m in self.materials_list if str(m.yaml_data.lib_path).lower().endswith(yaml_path.lower() + \".yml\") ] return mat_found[0] if mat_found else None search_material_by_n(n, wl=0.5875618, filter_shelf=None, filter_book=None) Search Material by refractive index Look for a material with a specific refractive index at a certain wavelength. In return, you get a sorted list of materials with index [0] being the closest to input n. Parameters: n ( float ) \u2013 refractive index wl ( float , default: 0.5875618 ) \u2013 wavelength filter_shelf ( str | None , default: None ) \u2013 if given, only materials containing this string in their shelf name are considered filter_book ( str | None , default: None ) \u2013 if given, only materials containing this string in their book name are considered Examples: >>> db = RefractiveIndexLibrary() >>> # get 3 closest OHARA glasses with n=1.5 at 0.55microns: >>> materials = db.search_material_by_n(1.5, wl=0.55, filter_book=\"ohara\")[:3] >>> print(materials[0].yaml_data.name, materials[0].get_n(0.55)) BSL3 1.4999474387027893 >>> print(materials[1].yaml_data.name, materials[1].get_n(0.55)) S-FPL51Y 1.498313496038896 >>> print(materials[2].yaml_data.name, materials[2].get_n(0.55)) S-FPL51 1.498303051383454 Returns: list [ Material ] \u2013 sorted list of materials matching search criteria Source code in pyindexrepo/main.py def search_material_by_n( self, n: float, wl: float = 0.5875618, filter_shelf: str | None = None, filter_book: str | None = None, ) -> list[Material]: \"\"\"Search Material by refractive index Look for a material with a specific refractive index at a certain wavelength. In return, you get a sorted list of materials with index [0] being the closest to input n. Args: n: refractive index wl: wavelength filter_shelf: if given, only materials containing this string in their shelf name are considered filter_book: if given, only materials containing this string in their book name are considered Examples: >>> db = RefractiveIndexLibrary() >>> # get 3 closest OHARA glasses with n=1.5 at 0.55microns: >>> materials = db.search_material_by_n(1.5, wl=0.55, filter_book=\"ohara\")[:3] >>> print(materials[0].yaml_data.name, materials[0].get_n(0.55)) BSL3 1.4999474387027893 >>> print(materials[1].yaml_data.name, materials[1].get_n(0.55)) S-FPL51Y 1.498313496038896 >>> print(materials[2].yaml_data.name, materials[2].get_n(0.55)) S-FPL51 1.498303051383454 Returns: sorted list of materials matching search criteria \"\"\" materials = [] materials_n_distance = [] for shelf_m, d in self.materials_dict.items(): if not (shelf_m == filter_shelf or filter_shelf is None): continue for book_name, book_m in d.items(): if filter_book is not None: if filter_book.lower() not in book_name.lower(): continue for mat in book_m.values(): materials.append(mat) try: materials_n_distance.append(abs(mat.get_n(wl) - n)) except ValueError: materials_n_distance.append(99) return [ x for _, x in sorted( zip(materials_n_distance, materials), key=lambda pair: pair[0] ) ] search_material_by_page_name(page_name, exact_match=False) Search Material by name Search a Material by page name as given at refractiveindex.info. Sometimes, the name is not unique, so the function returns either a single Material or a list of Materials or None if it doesn't find a match. Parameters: page_name ( str ) \u2013 name of the material as given as page name on refractiveindex.info exact_match ( bool , default: False ) \u2013 if True, only exact matches are considered. Default is False. e.g. if False, Returns: Material | list [ Material ] | None \u2013 Material or list of Materials matching the Name Examples: >>> db = RefractiveIndexLibrary() >>> bk7 = db.search_material_by_page_name('N-BK7')[0] # returns a list of different BK7 glasses >>> print(bk7.get_n(0.5875618)) 1.5168000345005885 Source code in pyindexrepo/main.py def search_material_by_page_name( self, page_name: str, exact_match: bool = False ) -> Material | list[Material] | None: \"\"\"Search Material by name Search a Material by page name as given at refractiveindex.info. Sometimes, the name is not unique, so the function returns either a single Material or a list of Materials or None if it doesn't find a match. Args: page_name: name of the material as given as page name on refractiveindex.info exact_match: if True, only exact matches are considered. Default is False. e.g. if False, 'BK7' will return all BK7 glasses, including N-BK7, K-BK7, etc. Returns: Material or list of Materials matching the Name Examples: >>> db = RefractiveIndexLibrary() >>> bk7 = db.search_material_by_page_name('N-BK7')[0] # returns a list of different BK7 glasses >>> print(bk7.get_n(0.5875618)) 1.5168000345005885 \"\"\" materials = [] if exact_match: for m in self.materials_list: if page_name == m.yaml_data.name: materials.append(m) else: for m in self.materials_list: if page_name in m.yaml_data.name: materials.append(m) return ( materials[0] if len(materials) == 1 else materials if len(materials) > 1 else None ) Specs dataclass A dataclass representing material specifications. Attributes: n_is_absolute ( bool ) \u2013 Indicates whether the refractive index is given in absolute units. True if it is, False if not, and None if unspecified. wavelength_is_vacuum ( bool ) \u2013 Specifies whether the wavelength is given in vacuum. True if it is, False if not, and None if unspecified. temperature ( float ) \u2013 The temperature of the material in degrees Celsius. None if unspecified. thermal_dispersion ( ThermalDispersion ) \u2013 An instance of the ThermalDispersion class representing thermal dispersion information. None if unspecified. nd ( float ) \u2013 The refractive index (n) of the material. None if unspecified. Vd ( float ) \u2013 The Abbe number (Vd) of the material. None if unspecified. glass_code ( float ) \u2013 The glass code associated with the material. None if unspecified. glass_status ( str ) \u2013 The status or classification of the glass material as a string. None if unspecified. density ( float ) \u2013 The density of the material. None if unspecified. thermal_expansion ( List [ ThermalExpansion ] ) \u2013 A list of instances of the ThermalExpansion class representing thermal expansion properties. None if unspecified. climatic_resistance ( float ) \u2013 The material's resistance to climatic conditions. None if unspecified. stain_resistance ( float ) \u2013 The material's resistance to staining. None if unspecified. acid_resistance ( float ) \u2013 The material's resistance to acids. None if unspecified. alkali_resistance ( float ) \u2013 The material's resistance to alkalis. None if unspecified. phosphate_resistance ( float ) \u2013 The material's resistance to phosphates. None if unspecified. Source code in pyindexrepo/main.py @dataclass class Specs: \"\"\" A dataclass representing material specifications. Attributes: n_is_absolute (bool, optional): Indicates whether the refractive index is given in absolute units. True if it is, False if not, and None if unspecified. wavelength_is_vacuum (bool, optional): Specifies whether the wavelength is given in vacuum. True if it is, False if not, and None if unspecified. temperature (float, optional): The temperature of the material in degrees Celsius. None if unspecified. thermal_dispersion (ThermalDispersion, optional): An instance of the ThermalDispersion class representing thermal dispersion information. None if unspecified. nd (float, optional): The refractive index (n) of the material. None if unspecified. Vd (float, optional): The Abbe number (Vd) of the material. None if unspecified. glass_code (float, optional): The glass code associated with the material. None if unspecified. glass_status (str, optional): The status or classification of the glass material as a string. None if unspecified. density (float, optional): The density of the material. None if unspecified. thermal_expansion (List[ThermalExpansion], optional): A list of instances of the ThermalExpansion class representing thermal expansion properties. None if unspecified. climatic_resistance (float, optional): The material's resistance to climatic conditions. None if unspecified. stain_resistance (float, optional): The material's resistance to staining. None if unspecified. acid_resistance (float, optional): The material's resistance to acids. None if unspecified. alkali_resistance (float, optional): The material's resistance to alkalis. None if unspecified. phosphate_resistance (float, optional): The material's resistance to phosphates. None if unspecified. \"\"\" n_is_absolute: bool | None = None wavelength_is_vacuum: bool | None = None temperature: float | None = None thermal_dispersion: ThermalDispersion | None = None nd: float | None = None Vd: float | None = None glass_code: float | None = None glass_status: str | None = None density: float | None = None thermal_expansion: List[ThermalExpansion] | None = None climatic_resistance: float | None = None stain_resistance: float | None = None acid_resistance: float | None = None alkali_resistance: float | None = None phosphate_resistance: float | None = None @staticmethod def read_specs_from_yaml(specs_dict): # Parse ThermalDispersion objects thermal_dispersion_list = [] if \"thermal_dispersion\" in specs_dict: for td_dict in specs_dict[\"thermal_dispersion\"]: if td_dict.get(\"type\") == \"Schott formula\": td = ThermalDispersion( formula_type=td_dict[\"type\"], coefficients=( np.array( [float(val) for val in td_dict[\"coefficients\"].split()], dtype=float, ) if td_dict.get(\"coefficients\") else None ), ) elif td_dict.get(\"type\") == \"dn/dT\": td = ThermalDispersion( formula_type=td_dict[\"type\"], coefficients=float(td_dict[\"value\"].split()[0]), ) else: td = None warning( f\"Thermal Dispersion formula {td_dict.get('type')} not implemented yet\" ) thermal_dispersion_list.append(td) if len(thermal_dispersion_list) > 1: warnings.warn( \"There are multiple values given for the thermal dispersion. This is not supported at the moment.\" ) # Parse TemperatureRange objects temperature_range_list = [] if \"thermal_expansion\" in specs_dict: for tr_dict in specs_dict[\"thermal_expansion\"]: if isinstance(tr_dict, dict): if tr_dict.get(\"temperature_range\"): tr = TemperatureRange( tr_dict[\"temperature_range\"][0], tr_dict[\"temperature_range\"][1], ) else: tr = None else: tr = None temperature_range_list.append(tr) temperature = specs_dict.get(\"temperature\") if temperature is not None: if isinstance(temperature, str): # if in Kelvin, convert to Celsius if \"K\" in temperature: temperature = float(temperature.split()[0]) - 273.15 elif \"C\" in temperature: temperature = float(temperature.split()[0]) else: temperature = float(temperature.split()[0]) - 273.15 warnings.warn( \"Temperature unit not recognized or given. Assuming Kelvin.\" ) elif isinstance(temperature, int): temperature = float(temperature) elif isinstance(temperature, float): pass else: warnings.warn( f\"Temperature is not a string or an integer/float. {temperature}\" ) # Create Specs dataclass instance specs = Specs( n_is_absolute=specs_dict.get(\"n_is_absolute\"), wavelength_is_vacuum=specs_dict.get(\"wavelength_is_vacuum\"), temperature=temperature, thermal_dispersion=( thermal_dispersion_list[0] if thermal_dispersion_list else None ), nd=specs_dict.get(\"nd\"), Vd=specs_dict.get(\"Vd\"), glass_code=specs_dict.get(\"glass_code\"), glass_status=specs_dict.get(\"glass_status\"), density=( float(specs_dict.get(\"density\").replace(\" g/cm<sup>3</sup>\", \"\")) if specs_dict.get(\"density\") else None ), thermal_expansion=( [ ThermalExpansion( temperature_range=tr, coefficient=( te_dict.get(\"coefficient\") or te_dict.get(\"value\") if isinstance(te_dict, dict) else None ), ) for tr, te_dict in zip( temperature_range_list, specs_dict[\"thermal_expansion\"] ) ] if specs_dict.get(\"thermal_expansion\") else None ), climatic_resistance=specs_dict.get(\"climatic_resistance\"), stain_resistance=specs_dict.get(\"stain_resistance\"), acid_resistance=specs_dict.get(\"acid_resistance\"), alkali_resistance=specs_dict.get(\"alkali_resistance\"), phosphate_resistance=specs_dict.get(\"phosphate_resistance\"), ) return specs def get_coefficient_of_thermal_expansion(self, temperature: float) -> float: \"\"\"Returns the coefficient of thermal expansion for a given temperature.\"\"\" if self.thermal_expansion is not None: # sort by total temperature range and return coefficient for smallest range self.thermal_expansion.sort( key=lambda exp: exp.temperature_range.max - exp.temperature_range.min ) for expansion in self.thermal_expansion: if ( expansion.temperature_range.min <= temperature <= expansion.temperature_range.max ): return expansion.coefficient # if temperature is outside any temperature range, return the value for the closest temperature range self.thermal_expansion.sort( key=lambda exp, t: min( abs(t - exp.temperature_range.max), abs(t - exp.temperature_range.min), ) ) warnings.warn( \"Temperature is outside any temperature range, returning closest value as coefficient\" ) return self.thermal_expansion[0].coefficient else: warnings.warn(\"No thermal expansion data. Returning 0.0\") return 0.0 get_coefficient_of_thermal_expansion(temperature) Returns the coefficient of thermal expansion for a given temperature. Source code in pyindexrepo/main.py def get_coefficient_of_thermal_expansion(self, temperature: float) -> float: \"\"\"Returns the coefficient of thermal expansion for a given temperature.\"\"\" if self.thermal_expansion is not None: # sort by total temperature range and return coefficient for smallest range self.thermal_expansion.sort( key=lambda exp: exp.temperature_range.max - exp.temperature_range.min ) for expansion in self.thermal_expansion: if ( expansion.temperature_range.min <= temperature <= expansion.temperature_range.max ): return expansion.coefficient # if temperature is outside any temperature range, return the value for the closest temperature range self.thermal_expansion.sort( key=lambda exp, t: min( abs(t - exp.temperature_range.max), abs(t - exp.temperature_range.min), ) ) warnings.warn( \"Temperature is outside any temperature range, returning closest value as coefficient\" ) return self.thermal_expansion[0].coefficient else: warnings.warn(\"No thermal expansion data. Returning 0.0\") return 0.0 TabulatedIndexData dataclass A dataclass representing tabulated index data. Attributes: wl ( ndarray | list [ float ] ) \u2013 An array or list containing wavelength values (in nm). n_or_k ( ndarray | list [ float ] ) \u2013 An array or list containing refractive index (n) or extinction coefficient (k) values. ip ( ( callable , read - only ) ) \u2013 A callable property to perform interpolation on the data. use_interpolation ( bool ) \u2013 Indicates whether to use interpolation when querying values. True to use interpolation, False to disable interpolation. Default is True. bounds_error ( bool ) \u2013 Indicates whether to raise an error for out-of-bounds queries. True to raise an error, False to suppress errors. Default is True. Source code in pyindexrepo/main.py @dataclass class TabulatedIndexData: \"\"\" A dataclass representing tabulated index data. Attributes: wl (np.ndarray | list[float]): An array or list containing wavelength values (in nm). n_or_k (np.ndarray | list[float]): An array or list containing refractive index (n) or extinction coefficient (k) values. ip (callable, read-only): A callable property to perform interpolation on the data. use_interpolation (bool, optional): Indicates whether to use interpolation when querying values. True to use interpolation, False to disable interpolation. Default is True. bounds_error (bool, optional): Indicates whether to raise an error for out-of-bounds queries. True to raise an error, False to suppress errors. Default is True. \"\"\" wl: np.ndarray | list[float] n_or_k: np.ndarray | list[float] ip: callable = field(init=False) use_interpolation: bool = field(default=True) bounds_error: bool = field(default=True) def __post_init__(self): if self.use_interpolation: self.ip = interp1d( np.atleast_1d(self.wl), np.atleast_1d(self.n_or_k), bounds_error=self.bounds_error, ) def get_n_or_k(self, wavelength): return self.ip(wavelength) ThermalDispersion dataclass Thermal Dispersion Deals with thermal dispersion of material. For a given formula_type and coefficients, delta_n_abs points to a function that is called with the arguments (n_ref, wavelength, coefficients*), where n_ref is the refractive index at reference temperature, wavelength the wavelength(s) value(s) and coefficients the array of the thermal dispersion coefficients. For speed reasons, the function delta_n_abs is outsourced to the dispersion_formulas.py file and speed up by numba. Attributes: formula_type ( str | None ) \u2013 name of the formula. Supported are 'Schott formula' coefficients ( ndarray | float | None ) \u2013 array with thermal dispersion coefficients (lengths depends on formula type) delta_n_abs ( callable ) \u2013 function called with the arguments (n_ref, wavelength, coefficients*) Source code in pyindexrepo/main.py @dataclass class ThermalDispersion: \"\"\"Thermal Dispersion Deals with thermal dispersion of material. For a given formula_type and coefficients, delta_n_abs points to a function that is called with the arguments (n_ref, wavelength, coefficients*), where n_ref is the refractive index at reference temperature, wavelength the wavelength(s) value(s) and coefficients the array of the thermal dispersion coefficients. For speed reasons, the function delta_n_abs is outsourced to the dispersion_formulas.py file and speed up by numba. Attributes: formula_type: name of the formula. Supported are 'Schott formula' coefficients: array with thermal dispersion coefficients (lengths depends on formula type) delta_n_abs: function called with the arguments (n_ref, wavelength, coefficients*) \"\"\" formula_type: str | None = None coefficients: np.ndarray | float | None = None delta_n_abs: callable = field(init=False) def __post_init__(self): if self.formula_type == \"Schott formula\": self.delta_n_abs = getattr( dispersion_formulas, \"delta_absolute_temperature\" ) elif self.formula_type == \"dn/dT\": self.delta_n_abs = getattr( dispersion_formulas, \"n_absolute_with_given_dndt\" ) else: logger.warning(\"Thermal Dispersion formula not implemented yet\") ThermalExpansion dataclass Thermal expansion Deals with thermal expansion of the material. Attributes: temperature_range: temperature range where thermal expansion coefficient is considered valid coefficient: thermal expansion coefficient [1/K] Source code in pyindexrepo/main.py @dataclass class ThermalExpansion: \"\"\"Thermal expansion Deals with thermal expansion of the material. Attributes: temperature_range: temperature range where thermal expansion coefficient is considered valid coefficient: thermal expansion coefficient [1/K] \"\"\" temperature_range: TemperatureRange coefficient: float YAMLMaterialData dataclass A dataclass representing material data in YAML format. Attributes: n_data ( YAMLRefractiveIndexData ) \u2013 An instance of YAMLRefractiveIndexData containing refractive index (n) data. k_data ( YAMLRefractiveIndexData ) \u2013 An instance of YAMLRefractiveIndexData containing extinction coefficient (k) data. comments ( str ) \u2013 Additional comments or notes related to the material data. Default is an empty string, indicating no comments. references ( str ) \u2013 References or sources of information for the material data. Default is an empty string, indicating no references. Source code in pyindexrepo/main.py @dataclass class YAMLMaterialData: \"\"\" A dataclass representing material data in YAML format. Attributes: n_data (YAMLRefractiveIndexData): An instance of YAMLRefractiveIndexData containing refractive index (n) data. k_data (YAMLRefractiveIndexData): An instance of YAMLRefractiveIndexData containing extinction coefficient (k) data. comments (str, optional): Additional comments or notes related to the material data. Default is an empty string, indicating no comments. references (str, optional): References or sources of information for the material data. Default is an empty string, indicating no references. \"\"\" n_data: YAMLRefractiveIndexData k_data: YAMLRefractiveIndexData comments: str = field(default=\"\") references: str = field(default=\"\") YAMLRefractiveIndexData dataclass A dataclass representing refractive index data in YAML format. Attributes: data_type ( str ) \u2013 The type of refractive index data, such as 'tabulated', 'formula', etc. wavelength_range ( str ) \u2013 The range of wavelengths for which the data is valid. Default is an empty string, indicating unspecified range. coefficients ( str ) \u2013 A string containing coefficients or formula details for formula-based data. Default is an empty string, indicating unspecified coefficients. data ( str ) \u2013 A string containing the actual data in YAML format. Default is an empty string, indicating unspecified data. Source code in pyindexrepo/main.py @dataclass class YAMLRefractiveIndexData: \"\"\" A dataclass representing refractive index data in YAML format. Attributes: data_type (str): The type of refractive index data, such as 'tabulated', 'formula', etc. wavelength_range (str, optional): The range of wavelengths for which the data is valid. Default is an empty string, indicating unspecified range. coefficients (str, optional): A string containing coefficients or formula details for formula-based data. Default is an empty string, indicating unspecified coefficients. data (str, optional): A string containing the actual data in YAML format. Default is an empty string, indicating unspecified data. \"\"\" data_type: str wavelength_range: str = field(default=\"\") coefficients: str = field(default=\"\") data: str = field(default=\"\") yaml_to_material(filepath, lib_shelf, lib_book, lib_page, lib_name) Converts RefractiveIndex.info YAML to Material Reads a yaml file of the refractiveindex database and converts it to a Material object. Parameters: filepath ( str | Path ) \u2013 path to yaml file lib_shelf ( str ) \u2013 RefractiveIndex.info shelf name lib_book ( str ) \u2013 RefractiveIndex.info book name lib_page ( str ) \u2013 RefractiveIndex.info page name lib_name ( str ) \u2013 RefractiveIndex.info material name Returns: Material | None \u2013 Material object Source code in pyindexrepo/main.py def yaml_to_material( filepath: str | Path, lib_shelf: str, lib_book: str, lib_page: str, lib_name: str ) -> Material | None: \"\"\"Converts RefractiveIndex.info YAML to Material Reads a yaml file of the refractiveindex database and converts it to a Material object. Args: filepath: path to yaml file lib_shelf: RefractiveIndex.info shelf name lib_book: RefractiveIndex.info book name lib_page: RefractiveIndex.info page name lib_name: RefractiveIndex.info material name Returns: Material object \"\"\" if isinstance(filepath, str): filepath = Path(filepath) def fill_variables_from_data_dict(data): \"\"\"Helper function to split data in yaml into Material attributes\"\"\" data_type = data[\"type\"] _wl_min = _wl_max = _wl = _n = _k = _coefficients = _formula = None if data_type == \"tabulated nk\": _wl, _n, _k = np.loadtxt(data[\"data\"].split(\"\\n\")).T _wl_min = np.min(_wl) _wl_max = np.max(_wl) elif data_type == \"tabulated n\": ( _wl, _n, ) = np.loadtxt(data[\"data\"].split(\"\\n\")).T _wl_min = np.min(_wl) _wl_max = np.max(_wl) elif data_type == \"tabulated k\": ( _wl, _k, ) = np.loadtxt(data[\"data\"].split(\"\\n\")).T _wl_min = np.min(_wl) _wl_max = np.max(_wl) elif \"formula\" in data_type: _wl_range = data.get(\"wavelength_range\") or data.get(\"range\") _wl_min, _wl_max = _wl_range if _wl_range is not None else None, None _coefficients = np.array([float(c) for c in data[\"coefficients\"].split()]) _formula = data[\"type\"].split()[1] # else: # logger.warning(f\"Could not convert YAML data for datatype {data_type}\") return _wl, _wl_min, _wl_max, _n, _k, _coefficients, _formula with open(filepath) as f: n_class = k_class = None try: d = yaml.safe_load(f) # fill core data from yaml file ( wl_n, wl_min_n, wl_max_n, n, k, coefficients, formula, ) = fill_variables_from_data_dict(d[\"DATA\"][0]) if formula: n_class = FormulaIndexData( getattr(dispersion_formulas, f\"formula_{formula}\"), coefficients, wl_min_n, wl_max_n, ) elif n is not None: n_class = TabulatedIndexData(wl_n, n, True, True) ( wl_k, wl_min_k, wl_max_k, _, k, coefficients_k, formula_k, ) = fill_variables_from_data_dict(next(iter(d[\"DATA\"][1:2]), {\"type\": \"\"})) if formula_k: k_class = FormulaIndexData( getattr(dispersion_formulas, f\"formula_{formula}\"), coefficients_k, wl_min_k, wl_max_k, ) elif k is not None: k_class = TabulatedIndexData(wl_k, k, True, True) # fill additional spec data if present specs = d.get(\"SPECS\", None) if specs is not None: logger.debug(specs) specs = Specs.read_specs_from_yaml(specs) except ScannerError: logger.warning(f\"Could not read data in {filepath}\") return None except ValueError: logger.warning(f\"Could not read data in {filepath} due to bad data\") return None return Material( n_class, k_class, specs, YAMLLibraryData( lib_name, yaml.dump(d), lib_shelf, lib_book, lib_page, filepath ), ) absolute_to_relative(n_abs, wl, T=20.0, P=0.10133) Converts absolute refractive index to relative Formula (5) of Schott TIE-19 Parameters: n_abs ( float | ndarray ) \u2013 absolute refractive index. wl ( float | ndarray ) \u2013 wavelength [micron] T ( float , default: 20.0 ) \u2013 Temperature [\u00b0Celsius] of absolute data P ( float , default: 0.10133 ) \u2013 Pressure [MPa] Returns: Source code in pyindexrepo/dispersion_formulas.py @njit(cache=True) def absolute_to_relative( n_abs: float | np.ndarray, wl: float | np.ndarray, T: float = 20.0, P: float = 0.10133, ): \"\"\"Converts absolute refractive index to relative Formula (5) of [Schott TIE-19](https://www.schott.com/en-gb/products/optical-glass-p1000267/downloads) Args: n_abs: absolute refractive index. wl: wavelength [micron] T: Temperature [\u00b0Celsius] of absolute data P: Pressure [MPa] Returns: \"\"\" return n_abs / n_air(wl, T, P) delta_absolute_temperature(n_abs_ref, wl, dT, D0, D1, D2, E0, E1, w_tk) deltaT of absolute refractive index at certain Temperature Returns the temperature coefficient of the absolute refractive index for given wavelength and temperature Formula (3) of Schott TIE-19 Parameters: n_abs_ref ( float | ndarray ) \u2013 absolute refractive index at reference temperature wl ( float | ndarray ) \u2013 wavelength in vacuum [micron] dT ( float ) \u2013 temperature difference between reference and actual temperature D0 ( float ) \u2013 constant depending on material D1 ( float ) \u2013 constant depending on material D2 ( float ) \u2013 constant depending on material E0 ( float ) \u2013 constant depending on material E1 ( float ) \u2013 constant depending on material w_tk ( float ) \u2013 constant depending on material Returns: Source code in pyindexrepo/dispersion_formulas.py @njit(cache=True) def delta_absolute_temperature( n_abs_ref: float | np.ndarray, wl: float | np.ndarray, dT: float, D0: float, D1: float, D2: float, E0: float, E1: float, w_tk: float, ): \"\"\"deltaT of absolute refractive index at certain Temperature Returns the temperature coefficient of the absolute refractive index for given wavelength and temperature Formula (3) of [Schott TIE-19](https://www.schott.com/en-gb/products/optical-glass-p1000267/downloads) Args: n_abs_ref: absolute refractive index at reference temperature wl: wavelength in vacuum [micron] dT: temperature difference between reference and actual temperature D0: constant depending on material D1: constant depending on material D2: constant depending on material E0: constant depending on material E1: constant depending on material w_tk: constant depending on material Returns: \"\"\" return ( (n_abs_ref**2 - 1.0) / (2.0 * n_abs_ref) * ( D0 * dT + D1 * dT**2 + D2 * dT**3 + (E0 * dT + E1 * dT**2) / (wl**2 - w_tk**2) ) ) dn_absolute_temperature(n_abs_ref, wl, dT, D0, D1, D2, E0, E1, w_tk) dn/dT of absolute refractive index at certain Temperature Returns the temperature coefficient of the absolute refractive index for given wavelength and temperature Formula (2) of Schott TIE-19 Parameters: n_abs_ref ( float | ndarray ) \u2013 absolute refractive index at reference temperature wl ( float | ndarray ) \u2013 wavelength in vacuum [micron] dT ( float ) \u2013 temperature difference between reference and actual temperature D0 ( float ) \u2013 constant depending on material D1 ( float ) \u2013 constant depending on material D2 ( float ) \u2013 constant depending on material E0 ( float ) \u2013 constant depending on material E1 ( float ) \u2013 constant depending on material w_tk ( float ) \u2013 constant depending on material Returns: Source code in pyindexrepo/dispersion_formulas.py @njit(cache=True) def dn_absolute_temperature( n_abs_ref: float | np.ndarray, wl: float | np.ndarray, dT: float, D0: float, D1: float, D2: float, E0: float, E1: float, w_tk: float, ): \"\"\"dn/dT of absolute refractive index at certain Temperature Returns the temperature coefficient of the absolute refractive index for given wavelength and temperature Formula (2) of [Schott TIE-19](https://www.schott.com/en-gb/products/optical-glass-p1000267/downloads) Args: n_abs_ref: absolute refractive index at reference temperature wl: wavelength in vacuum [micron] dT: temperature difference between reference and actual temperature D0: constant depending on material D1: constant depending on material D2: constant depending on material E0: constant depending on material E1: constant depending on material w_tk: constant depending on material Returns: \"\"\" return ( (n_abs_ref**2 - 1.0) / (2.0 * n_abs_ref) * ( D0 + 2.0 * D1 * dT + 3 * D2 * dT**2 + ((E0 + 2 * E1 * dT) / (wl**2 - w_tk**2)) ) ) dn_dt_air(wl, T, P) Temperature coefficient dn/dT of air Calculates the temperature dependence of the refractive index of air as given in Schott TIE-19 - Formula (10): Parameters: wl ( float | ndarray ) \u2013 wavelength T ( float ) \u2013 air temperature [\u00b0Celsius] P ( float ) \u2013 air pressure [MPa] Returns: \u2013 dn/dT of air Source code in pyindexrepo/dispersion_formulas.py @njit(cache=True) def dn_dt_air(wl: float | np.ndarray, T: float, P: float): \"\"\"Temperature coefficient dn/dT of air Calculates the temperature dependence of the refractive index of air as given in [Schott TIE-19](https://www.schott.com/en-gb/products/optical-glass-p1000267/downloads) - Formula (10): Args: wl: wavelength T: air temperature [\u00b0Celsius] P: air pressure [MPa] Returns: dn/dT of air \"\"\" return -0.00367 * (n_air(wl, T, P) - 1.0) / (1.0 + 0.00367 * T) formula_1(wavelength, coefficients) Sellmeier (preferred) dispersion formula The formula has the general form: \\[ {n}^{2}-1={C}_{1}+\\frac{{C}_{2}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{3}^{2}}+\\frac{{C}_{4}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{5}^{2}}+\\frac{{C}_{6}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{7}^{2}}+\\frac{{C}_{8}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{9}^{2}}+\\frac{{C}_{10}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{11}^{2}}+\\frac{{C}_{12}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{13}^{2}}+\\frac{{C}_{14}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{15}^{2}}+\\frac{{C}_{16}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{17}^{2}} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_1(wavelength, coefficients): r\"\"\"Sellmeier (preferred) dispersion formula The formula has the general form: $$ {n}^{2}-1={C}_{1}+\\frac{{C}_{2}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{3}^{2}}+\\frac{{C}_{4}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{5}^{2}}+\\frac{{C}_{6}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{7}^{2}}+\\frac{{C}_{8}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{9}^{2}}+\\frac{{C}_{10}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{11}^{2}}+\\frac{{C}_{12}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{13}^{2}}+\\frac{{C}_{14}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{15}^{2}}+\\frac{{C}_{16}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{17}^{2}} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" nsq = np.ones_like(wavelength) + coefficients[0] for i in range(1, len(coefficients), 2): nsq = nsq + formula_1_helper(wavelength, coefficients[i], coefficients[i + 1]) return np.sqrt(nsq) formula_2(wavelength, coefficients) Sellmeier-2 dispersion formula. The formula has the general form: \\[ {n}^{2}-1={C}_{1}+\\frac{{C}_{2}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{3}}+\\frac{{C}_{4}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{5}}+\\frac{{C}_{6}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{7}}+\\frac{{C}_{8}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{9}}+\\frac{{C}_{10}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{11}}+\\frac{{C}_{12}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{13}}+\\frac{{C}_{14}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{15}}+\\frac{{C}_{16}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{17}} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_2(wavelength, coefficients): r\"\"\"Sellmeier-2 dispersion formula. The formula has the general form: $$ {n}^{2}-1={C}_{1}+\\frac{{C}_{2}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{3}}+\\frac{{C}_{4}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{5}}+\\frac{{C}_{6}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{7}}+\\frac{{C}_{8}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{9}}+\\frac{{C}_{10}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{11}}+\\frac{{C}_{12}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{13}}+\\frac{{C}_{14}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{15}}+\\frac{{C}_{16}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{17}} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" nsq = np.ones_like(wavelength) + coefficients[0] for i in range(1, len(coefficients), 2): nsq = nsq + formula_2_helper(wavelength, coefficients[i], coefficients[i + 1]) return np.sqrt(nsq) formula_3(wavelength, coefficients) Polynomial dispersion formula. The formula has the general form: \\[ {n}^{2}={C}_{1}+{C}_{2}{\\lambda }^{{C}_{3}}+{C}_{4}{\\lambda }^{{C}_{5}}+{C}_{6}{\\lambda }^{{C}_{7}}+{C}_{8}{\\lambda }^{{C}_{9}}+{C}_{10}{\\lambda }^{{C}_{11}}+{C}_{12}{\\lambda }^{{C}_{13}}+{C}_{14}{\\lambda }^{{C}_{15}}+{C}_{16}{\\lambda }^{{C}_{17}} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_3(wavelength, coefficients): r\"\"\"Polynomial dispersion formula. The formula has the general form: $$ {n}^{2}={C}_{1}+{C}_{2}{\\lambda }^{{C}_{3}}+{C}_{4}{\\lambda }^{{C}_{5}}+{C}_{6}{\\lambda }^{{C}_{7}}+{C}_{8}{\\lambda }^{{C}_{9}}+{C}_{10}{\\lambda }^{{C}_{11}}+{C}_{12}{\\lambda }^{{C}_{13}}+{C}_{14}{\\lambda }^{{C}_{15}}+{C}_{16}{\\lambda }^{{C}_{17}} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" nsq = np.ones_like(wavelength) * coefficients[0] for i in range(1, len(coefficients), 2): nsq = nsq + formula_3457_helper( wavelength, coefficients[i], coefficients[i + 1] ) return np.sqrt(nsq) formula_4(wavelength, coefficients) RefractiveIndex.INFO dispersion formula The formula has the general form: \\[ {n}^{2}={C}_{1}+\\frac{{C}_{2}{\\lambda }^{{C}_{3}}}{{\\lambda }^{2}-{C}_{4}^{{C}_{5}}}+\\frac{{C}_{6}{\\lambda }^{{C}_{7}}}{{\\lambda }^{2}-{C}_{8}^{{C}_{9}}}+{C}_{10}{\\lambda }^{{C}_{11}}+{C}_{12}{\\lambda }^{{C}_{13}}+{C}_{14}{\\lambda }^{{C}_{15}}+{C}_{16}{\\lambda }^{{C}_{17}} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_4(wavelength, coefficients): r\"\"\"RefractiveIndex.INFO dispersion formula The formula has the general form: $$ {n}^{2}={C}_{1}+\\frac{{C}_{2}{\\lambda }^{{C}_{3}}}{{\\lambda }^{2}-{C}_{4}^{{C}_{5}}}+\\frac{{C}_{6}{\\lambda }^{{C}_{7}}}{{\\lambda }^{2}-{C}_{8}^{{C}_{9}}}+{C}_{10}{\\lambda }^{{C}_{11}}+{C}_{12}{\\lambda }^{{C}_{13}}+{C}_{14}{\\lambda }^{{C}_{15}}+{C}_{16}{\\lambda }^{{C}_{17}} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" nsq = np.zeros_like(wavelength) + coefficients[0] for i in range(1, min(9, len(coefficients)), 4): nsq = nsq + formula_4_helper1( wavelength, coefficients[i], coefficients[i + 1], coefficients[i + 2], coefficients[i + 3], ) if len(coefficients) > 8: for i in range(9, len(coefficients), 2): nsq = nsq + formula_3457_helper( wavelength, coefficients[i], coefficients[i + 1] ) return np.sqrt(nsq) formula_5(wavelength, coefficients) Cauchy dispersion formula The formula has the general form: \\[ n={C}_{1}+{C}_{2}{\\lambda }^{{C}_{3}}+{C}_{4}{\\lambda }^{{C}_{5}}+{C}_{6}{\\lambda }^{{C}_{7}}+{C}_{8}{\\lambda }^{{C}_{9}}+{C}_{10}{\\lambda }^{{C}_{11}} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_5(wavelength, coefficients): r\"\"\"Cauchy dispersion formula The formula has the general form: $$ n={C}_{1}+{C}_{2}{\\lambda }^{{C}_{3}}+{C}_{4}{\\lambda }^{{C}_{5}}+{C}_{6}{\\lambda }^{{C}_{7}}+{C}_{8}{\\lambda }^{{C}_{9}}+{C}_{10}{\\lambda }^{{C}_{11}} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" n = np.zeros_like(wavelength) + coefficients[0] for i in range(1, len(coefficients), 2): n = n + formula_3457_helper(wavelength, coefficients[i], coefficients[i + 1]) return n formula_6(wavelength, coefficients) Gases dispersion formula The formula has the general form: \\[ n-1={C}_{1}+\\frac{{C}_{2}}{{C}_{3}-{\\lambda }^{-2}}+\\frac{{C}_{4}}{{C}_{5}-{\\lambda }^{-2}}+\\frac{{C}_{6}}{{C}_{7}-{\\lambda }^{-2}}+\\frac{{C}_{8}}{{C}_{9}-{\\lambda }^{-2}}+\\frac{{C}_{10}}{{C}_{11}-{\\lambda }^{-2}} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_6(wavelength, coefficients): r\"\"\"Gases dispersion formula The formula has the general form: $$ n-1={C}_{1}+\\frac{{C}_{2}}{{C}_{3}-{\\lambda }^{-2}}+\\frac{{C}_{4}}{{C}_{5}-{\\lambda }^{-2}}+\\frac{{C}_{6}}{{C}_{7}-{\\lambda }^{-2}}+\\frac{{C}_{8}}{{C}_{9}-{\\lambda }^{-2}}+\\frac{{C}_{10}}{{C}_{11}-{\\lambda }^{-2}} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" n = np.ones_like(wavelength) + coefficients[0] for i in range(1, len(coefficients), 2): n = n + formula_6_helper(wavelength, coefficients[i], coefficients[i + 1]) return n formula_7(wavelength, coefficients) Herzberger dispersion formula The formula has the general form: \\[ n={C}_{1}+\\frac{{C}_{2}}{{\\lambda }^{2}-0.028}+{C}_{3}{\\left(\\frac{1}{{\\lambda }^{2}-0.028}\\right)}^{2}+{C}_{4}{\\lambda }^{2}+{C}_{5}{\\lambda }^{4}+{C}_{6}{\\lambda }^{6} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_7(wavelength, coefficients): r\"\"\"Herzberger dispersion formula The formula has the general form: $$ n={C}_{1}+\\frac{{C}_{2}}{{\\lambda }^{2}-0.028}+{C}_{3}{\\left(\\frac{1}{{\\lambda }^{2}-0.028}\\right)}^{2}+{C}_{4}{\\lambda }^{2}+{C}_{5}{\\lambda }^{4}+{C}_{6}{\\lambda }^{6} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" n = np.zeros_like(wavelength) + coefficients[0] n = n + formula_7_helper1(wavelength, coefficients[1], 1) n = n + formula_7_helper1(wavelength, coefficients[2], 2) for i in range(3, len(coefficients)): n = n + formula_3457_helper(wavelength, coefficients[i], float64(2 * (i - 2))) return n formula_8(wavelength, coefficients) Formula 8 dispersion formula from refractiveindex.info The formula has the general form: \\[ \\frac{{n}^{2}-1}{{n}^{2}+2}={C}_{1}+\\frac{{C}_{2}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{3}}+{C}_{4}{\\lambda }^{2} \\] Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_8(wavelength, coefficients): r\"\"\"Formula 8 dispersion formula from refractiveindex.info The formula has the general form: $$ \\frac{{n}^{2}-1}{{n}^{2}+2}={C}_{1}+\\frac{{C}_{2}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{3}}+{C}_{4}{\\lambda }^{2} $$ \"\"\" return np.sqrt( ( wavelength**2 * ( 2 * coefficients[0] + 2 * coefficients[1] + 2 * coefficients[3] * wavelength**2 + 1 ) - coefficients[2] * (2 * coefficients[0] + 2 * coefficients[3] * wavelength**2 + 1) ) / ( coefficients[2] * (coefficients[0] + coefficients[3] * wavelength**2 - 1) - wavelength**2 * (coefficients[0] + coefficients[1] + coefficients[3] * wavelength ** 2 - 1) ) ) formula_9(wavelength, coefficients) Formula 9 dispersion formula from refractiveindex.info The formula has the general form: \\[ {n}^{2}={C}_{1}+\\frac{{C}_{2}}{{\\lambda }^{2}-{C}_{3}}+\\frac{{C}_{4}(\\lambda -{C}_{5})}{{(\\lambda -{C}_{5})}^{2}+{C}_{6}} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_9(wavelength, coefficients): r\"\"\"Formula 9 dispersion formula from refractiveindex.info The formula has the general form: $$ {n}^{2}={C}_{1}+\\frac{{C}_{2}}{{\\lambda }^{2}-{C}_{3}}+\\frac{{C}_{4}(\\lambda -{C}_{5})}{{(\\lambda -{C}_{5})}^{2}+{C}_{6}} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" return np.sqrt( coefficients[0] + coefficients[1] / (wavelength**2 - coefficients[2]) + coefficients[3] * (wavelength - coefficients[4]) / ((wavelength - coefficients[4]) ** 2 + coefficients[5]) ) n_absolute_with_given_dndt(n_rel, wl, dT, coefficient) Calculates absolute refractive index with given dn/dT Formula (6) of Schott TIE-19 Parameters: n_rel ( float | ndarray ) \u2013 relative refractive index wl ( float | ndarray ) \u2013 wavelength [micron] dT ( float ) \u2013 temperature difference [\u00b0Celsius] coefficient ( float ) \u2013 dn/dT Returns: Source code in pyindexrepo/dispersion_formulas.py @njit(cache=True) def n_absolute_with_given_dndt( n_rel: float | np.ndarray, wl: float | np.ndarray, dT: float, coefficient: float ): \"\"\"Calculates absolute refractive index with given dn/dT Formula (6) of [Schott TIE-19](https://www.schott.com/en-gb/products/optical-glass-p1000267/downloads) Args: n_rel: relative refractive index wl: wavelength [micron] dT: temperature difference [\u00b0Celsius] coefficient: dn/dT Returns: \"\"\" return n_rel + coefficient * dT n_air(wl, T=20.0, P=0.10133) Refractive index of air Calculates the refractive index of air as described in Schott TIE-19 - Formula (8): Parameters: wl ( float | ndarray ) \u2013 wavelength T ( float , default: 20.0 ) \u2013 air temperature [\u00b0Celsius] P ( float , default: 0.10133 ) \u2013 air pressure [MPa] Returns: \u2013 refractive index of air Source code in pyindexrepo/dispersion_formulas.py @njit(cache=True) def n_air(wl: float | np.ndarray, T: float = 20.0, P: float = 0.10133): \"\"\"Refractive index of air Calculates the refractive index of air as described in [Schott TIE-19](https://www.schott.com/en-gb/products/optical-glass-p1000267/downloads) - Formula (8): Args: wl: wavelength T: air temperature [\u00b0Celsius] P: air pressure [MPa] Returns: refractive index of air \"\"\" n_air_ref = 1.0 + 1e-8 * ( 6432.8 + (2949810.0 * wl**2) / (146.0 * wl**2 - 1.0) + (25540.0 * wl**2) / (41.0 * wl**2 - 1.0) ) return 1.0 + (n_air_ref - 1.0) / (1.0 + 3.4785e-3 * (T - 15.0)) * (P / 0.10133) relative_to_absolute(n_rel, wl, T=20.0, P=0.10133) Converts relative refractive index to absolute Reverse of Formula (5) of Schott TIE-19 Parameters: n_rel ( float | ndarray ) \u2013 relative refractive index wl ( float | ndarray ) \u2013 wavelength [micron] T ( float , default: 20.0 ) \u2013 Temperature [\u00b0Celsius] P ( float , default: 0.10133 ) \u2013 Pressure [MPa] Returns: Source code in pyindexrepo/dispersion_formulas.py @njit(cache=True) def relative_to_absolute( n_rel: float | np.ndarray, wl: float | np.ndarray, T: float = 20.0, P: float = 0.10133, ): \"\"\"Converts relative refractive index to absolute Reverse of Formula (5) of [Schott TIE-19](https://www.schott.com/en-gb/products/optical-glass-p1000267/downloads) Args: n_rel: relative refractive index wl: wavelength [micron] T: Temperature [\u00b0Celsius] P: Pressure [MPa] Returns: \"\"\" return n_rel * n_air(wl, T, P)","title":"API reference"},{"location":"api/#pyindexrepo.main.FormulaIndexData","text":"A dataclass representing formula-based index data. Attributes: formula ( callable ) \u2013 A callable function that computes the refractive index (n) or extinction coefficient (k) for a given wavelength. coefficients ( array ) \u2013 An array of coefficients required by the formula function. min_wl ( float ) \u2013 The minimum wavelength (in nm) for which the formula is valid. Default is negative infinity. max_wl ( float ) \u2013 The maximum wavelength (in nm) for which the formula is valid. Default is positive infinity. Source code in pyindexrepo/main.py @dataclass class FormulaIndexData: \"\"\" A dataclass representing formula-based index data. Attributes: formula (callable): A callable function that computes the refractive index (n) or extinction coefficient (k) for a given wavelength. coefficients (np.array): An array of coefficients required by the formula function. min_wl (float, optional): The minimum wavelength (in nm) for which the formula is valid. Default is negative infinity. max_wl (float, optional): The maximum wavelength (in nm) for which the formula is valid. Default is positive infinity. \"\"\" formula: callable coefficients: np.array min_wl: float = field(default=-np.inf) max_wl: float = field(default=np.inf) def __post_init__(self): self.coefficients = np.array(self.coefficients, dtype=float) def get_n_or_k(self, wavelength: float | np.ndarray) -> float | np.ndarray: if isinstance(wavelength, float) or isinstance(wavelength, np.ndarray): return self.formula(wavelength, self.coefficients) elif isinstance(wavelength, list): return self.formula(np.array(wavelength), self.coefficients) else: raise ValueError(f\"The datatype {type(wavelength)} is not supported.\")","title":"FormulaIndexData"},{"location":"api/#pyindexrepo.main.Material","text":"A dataclass representing a material's properties. Attributes: n ( TabulatedIndexData | FormulaIndexData | None ) \u2013 The refractive index (n) data for the material. It can be an instance of TabulatedIndexData or FormulaIndexData, or None if unspecified. k ( TabulatedIndexData | FormulaIndexData | None ) \u2013 The extinction coefficient (k) data for the material. It can be an instance of TabulatedIndexData or FormulaIndexData, or None if unspecified. specs ( Specs | None ) \u2013 An instance of the Specs dataclass representing material specifications. None if unspecified. yaml_data ( YAMLLibraryData ) \u2013 An instance of the YAMLLibraryData class representing YAML library data. None if unspecified. Source code in pyindexrepo/main.py @dataclass class Material: \"\"\" A dataclass representing a material's properties. Attributes: n (TabulatedIndexData | FormulaIndexData | None, optional): The refractive index (n) data for the material. It can be an instance of TabulatedIndexData or FormulaIndexData, or None if unspecified. k (TabulatedIndexData | FormulaIndexData | None, optional): The extinction coefficient (k) data for the material. It can be an instance of TabulatedIndexData or FormulaIndexData, or None if unspecified. specs (Specs | None, optional): An instance of the Specs dataclass representing material specifications. None if unspecified. yaml_data (YAMLLibraryData, optional): An instance of the YAMLLibraryData class representing YAML library data. None if unspecified. \"\"\" n: TabulatedIndexData | FormulaIndexData | None = field(default=None) k: TabulatedIndexData | FormulaIndexData | None = field(default=None) specs: Specs | None = field(default=None) yaml_data: YAMLLibraryData = field(default=None) def get_n(self, wavelength: float | np.ndarray) -> float | np.ndarray: \"\"\"Get refractive index n for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. Returns: float or array of floats: Refractive index n for the given wavelength \"\"\" if self.n is None: warnings.warn(\"No n data. Returning 0\") return np.zeros_like(wavelength) return self.n.get_n_or_k(wavelength) def get_k(self, wavelength: float | np.ndarray) -> float | np.ndarray: \"\"\"Get extinction coefficient k for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. Returns: float or array of floats: Extinction coefficient k for the given wavelength \"\"\" if self.k is None: warnings.warn(\"No k data. Returning 0\") return np.zeros_like(wavelength) return self.k.get_n_or_k(wavelength) def get_nk(self, wavelength: float | np.ndarray) -> tuple[float | np.ndarray, float | np.ndarray]: \"\"\"Get refractive index n and extinction coefficient k for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. Returns: tuple of floats or arrays of floats: Refractive index n and extinction coefficient k for the given wavelength \"\"\" return self.get_n(wavelength), self.get_k(wavelength) def get_n_at_temperature( self, wavelength: float | np.ndarray, temperature: float, P: float = 0.10133 ) -> float | np.ndarray: \"\"\"Get refractive index n at a given temperature for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. temperature: Temperature in degrees P: Pressure in MPa. Default is 0.10133 MPa (1 atm). Returns: float or array of floats: Refractive index n at the given temperature for the given wavelength \"\"\" assert self.specs is not None, \"There are no specs available for this material\" assert self.specs.thermal_expansion is not None, ( \"There is no thermal dispersion formula available \" \"for this material\" ) if self.specs.wavelength_is_vacuum: n_abs = self.get_n(wavelength) return n_abs + self.specs.thermal_dispersion.delta_n_abs( n_abs, wavelength, temperature - self.specs.temperature, self.specs.thermal_dispersion.coefficients, ) else: rel_wavelength = ( wavelength * dispersion_formulas.n_air(wavelength, temperature, P) / dispersion_formulas.n_air(wavelength) ) n_rel = self.get_n(rel_wavelength) n_abs = dispersion_formulas.relative_to_absolute( n_rel, rel_wavelength, self.specs.temperature, 0.10133 ) n_abs += self.specs.thermal_dispersion.delta_n_abs( n_abs, rel_wavelength, temperature - self.specs.temperature, *self.specs.thermal_dispersion.coefficients, ) return dispersion_formulas.absolute_to_relative( n_abs, rel_wavelength, temperature, P ) def __str__(self): return self.yaml_data.name def __repr__(self): return self.yaml_data.name","title":"Material"},{"location":"api/#pyindexrepo.main.Material.get_k","text":"Get extinction coefficient k for a given wavelength or array of wavelengths. Parameters: wavelength ( float | ndarray ) \u2013 Wavelength or array of wavelengths in micrometers. Returns: float | ndarray \u2013 float or array of floats: Extinction coefficient k for the given wavelength Source code in pyindexrepo/main.py def get_k(self, wavelength: float | np.ndarray) -> float | np.ndarray: \"\"\"Get extinction coefficient k for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. Returns: float or array of floats: Extinction coefficient k for the given wavelength \"\"\" if self.k is None: warnings.warn(\"No k data. Returning 0\") return np.zeros_like(wavelength) return self.k.get_n_or_k(wavelength)","title":"get_k"},{"location":"api/#pyindexrepo.main.Material.get_n","text":"Get refractive index n for a given wavelength or array of wavelengths. Parameters: wavelength ( float | ndarray ) \u2013 Wavelength or array of wavelengths in micrometers. Returns: float | ndarray \u2013 float or array of floats: Refractive index n for the given wavelength Source code in pyindexrepo/main.py def get_n(self, wavelength: float | np.ndarray) -> float | np.ndarray: \"\"\"Get refractive index n for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. Returns: float or array of floats: Refractive index n for the given wavelength \"\"\" if self.n is None: warnings.warn(\"No n data. Returning 0\") return np.zeros_like(wavelength) return self.n.get_n_or_k(wavelength)","title":"get_n"},{"location":"api/#pyindexrepo.main.Material.get_n_at_temperature","text":"Get refractive index n at a given temperature for a given wavelength or array of wavelengths. Parameters: wavelength ( float | ndarray ) \u2013 Wavelength or array of wavelengths in micrometers. temperature ( float ) \u2013 Temperature in degrees P ( float , default: 0.10133 ) \u2013 Pressure in MPa. Default is 0.10133 MPa (1 atm). Returns: float | ndarray \u2013 float or array of floats: Refractive index n at the given temperature for the given wavelength Source code in pyindexrepo/main.py def get_n_at_temperature( self, wavelength: float | np.ndarray, temperature: float, P: float = 0.10133 ) -> float | np.ndarray: \"\"\"Get refractive index n at a given temperature for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. temperature: Temperature in degrees P: Pressure in MPa. Default is 0.10133 MPa (1 atm). Returns: float or array of floats: Refractive index n at the given temperature for the given wavelength \"\"\" assert self.specs is not None, \"There are no specs available for this material\" assert self.specs.thermal_expansion is not None, ( \"There is no thermal dispersion formula available \" \"for this material\" ) if self.specs.wavelength_is_vacuum: n_abs = self.get_n(wavelength) return n_abs + self.specs.thermal_dispersion.delta_n_abs( n_abs, wavelength, temperature - self.specs.temperature, self.specs.thermal_dispersion.coefficients, ) else: rel_wavelength = ( wavelength * dispersion_formulas.n_air(wavelength, temperature, P) / dispersion_formulas.n_air(wavelength) ) n_rel = self.get_n(rel_wavelength) n_abs = dispersion_formulas.relative_to_absolute( n_rel, rel_wavelength, self.specs.temperature, 0.10133 ) n_abs += self.specs.thermal_dispersion.delta_n_abs( n_abs, rel_wavelength, temperature - self.specs.temperature, *self.specs.thermal_dispersion.coefficients, ) return dispersion_formulas.absolute_to_relative( n_abs, rel_wavelength, temperature, P )","title":"get_n_at_temperature"},{"location":"api/#pyindexrepo.main.Material.get_nk","text":"Get refractive index n and extinction coefficient k for a given wavelength or array of wavelengths. Parameters: wavelength ( float | ndarray ) \u2013 Wavelength or array of wavelengths in micrometers. Returns: tuple [ float | ndarray , float | ndarray ] \u2013 tuple of floats or arrays of floats: Refractive index n and extinction coefficient k for the given wavelength Source code in pyindexrepo/main.py def get_nk(self, wavelength: float | np.ndarray) -> tuple[float | np.ndarray, float | np.ndarray]: \"\"\"Get refractive index n and extinction coefficient k for a given wavelength or array of wavelengths. Args: wavelength: Wavelength or array of wavelengths in micrometers. Returns: tuple of floats or arrays of floats: Refractive index n and extinction coefficient k for the given wavelength \"\"\" return self.get_n(wavelength), self.get_k(wavelength)","title":"get_nk"},{"location":"api/#pyindexrepo.main.RefractiveIndexLibrary","text":"The dataclass representing the refractive index library using data from RefractiveIndex.info. Attributes: path_to_library ( Path ) \u2013 The path to the refractive index library YAML file. Default is a path pointing to a default library file. auto_upgrade ( bool ) \u2013 Automatically upgrade the library when initialized if set to True. Default is False. force_upgrade ( bool ) \u2013 Forcefully upgrade the library even if not necessary if set to True. Default is False. materials_yaml ( ( List [ YAMLLibraryData ], read - only ) ) \u2013 A list of YAML library data instances representing materials. materials_dict ( ( Dict [ str , Dict [ str , Dict [ str , Material ]]], read - only ) ) \u2013 A dictionary of materials organized by catalog, category, and name. materials_list ( ( List [ Material ], read - only ) ) \u2013 A list of all materials contained in the library. github_sha ( ( str , read - only ) ) \u2013 The GitHub SHA corresponding to the version of the library data. Source code in pyindexrepo/main.py @dataclass class RefractiveIndexLibrary: \"\"\" The dataclass representing the refractive index library using data from RefractiveIndex.info. Attributes: path_to_library (Path, optional): The path to the refractive index library YAML file. Default is a path pointing to a default library file. auto_upgrade (bool, optional): Automatically upgrade the library when initialized if set to True. Default is False. force_upgrade (bool, optional): Forcefully upgrade the library even if not necessary if set to True. Default is False. materials_yaml (List[YAMLLibraryData], read-only): A list of YAML library data instances representing materials. materials_dict (Dict[str, Dict[str, Dict[str, Material]]], read-only): A dictionary of materials organized by catalog, category, and name. materials_list (List[Material], read-only): A list of all materials contained in the library. github_sha (str, read-only): The GitHub SHA corresponding to the version of the library data. \"\"\" path_to_library: Path = field( default=Path(__file__) .absolute() .parent.parent.joinpath(\"database/catalog-nk.yml\") ) auto_upgrade: bool = field(default=False) force_upgrade: bool = field(default=False) materials_yaml: list[YAMLLibraryData] = field(default_factory=list, init=False) materials_dict: dict[str, dict[str, dict[str, Material]]] = field( default_factory=dict, init=False ) materials_list: list[Material] = field(default_factory=list, init=False) github_sha: str = field(default=\"\", init=False) def _is_library_outdated(self) -> bool: \"\"\"Checks if local library is outdated\"\"\" if self.path_to_library.parent.joinpath(\".local_sha\").exists(): # get local commit hash with open(self.path_to_library.parent.joinpath(\".local_sha\"), \"r\") as file: local_sha = file.readline() # get current commit hash on GitHub try: self.github_sha = requests.get( \"https://api.github.com/repos/polyanskiy/refractiveindex.info-database/commits/master\" ).json()[\"sha\"] except KeyError: logger.warning( \"Couldn't get SHA commit hash on GitHub. Database can not be updated.\" ) self.github_sha = \"\" return False return not (self.github_sha == local_sha) else: logger.info(\"No local library exists.\") return True def _download_latest_commit(self) -> bool: \"\"\"Download latest library from GitHub. Downloads the latest library from the refractiveindex.info GitHub repository and extracts the necessary data files. Returns: bool: True if the library was successfully downloaded, False otherwise. \"\"\" if self._is_library_outdated() or self.force_upgrade: logger.info(\"New Library available... Downloading...\") zip_url = \"https://api.github.com/repos/polyanskiy/refractiveindex.info-database/zipball\" response = requests.get(zip_url) with open(self.path_to_library.with_suffix(\".zip\"), \"wb\") as file: file.write(response.content) with zipfile.ZipFile(self.path_to_library.with_suffix(\".zip\"), \"r\") as file: file_list = file.namelist() subfolder_files = [ file for file in file_list if file.startswith(f\"{file_list[0]}database/data-nk\") and file.endswith(\".yml\") ] subfolder_files.append(f\"{file_list[0]}database/catalog-nk.yml\") for fn in subfolder_files: logger.debug(fn) # create a new Path object for the file to extract extract_path = self.path_to_library.parent / Path( \"/\".join(Path(fn).parts[2:]) ) extract_path.parent.mkdir(parents=True, exist_ok=True) # open the file in the zipfile and write it to disk with file.open(fn) as zf, extract_path.open(\"wb\") as of: of.write(zf.read()) with open(self.path_to_library.parent.joinpath(\".local_sha\"), \"w\") as file: file.write(self.github_sha) return True else: return False def _load_from_yaml(self): \"\"\"Load data from yaml file for internal use Returns: None \"\"\" logger.info(\"load from yaml\") with open(self.path_to_library) as f: yaml_data = yaml.safe_load(f) for s in yaml_data: for book in s[\"content\"]: if \"BOOK\" not in book: continue for page in book[\"content\"]: if \"PAGE\" not in page: continue # fill yaml list self.materials_yaml.append( YAMLLibraryData( name=page[\"name\"], lib_page=page[\"PAGE\"], lib_book=book[\"BOOK\"], lib_shelf=s[\"SHELF\"], lib_data=page[\"data\"], lib_path=self.path_to_library.parent.joinpath( \"data-nk\" ).joinpath(page[\"data\"]), ) ) def _convert_to_material_dict(self): \"\"\"Convert yaml data to Material objects Returns: None \"\"\" for m in self.materials_yaml: # try to load material from yaml mat = yaml_to_material(self.path_to_library.parent.joinpath(\"data-nk\").joinpath(m.lib_data), m.lib_shelf, m.lib_book, m.lib_page, m.name) if mat: # add material to dict, use shelf, book and page as keys self.materials_dict.setdefault(m.lib_shelf, {}).setdefault(m.lib_book, {}).update({m.lib_page: mat}) self.materials_list.append(self.materials_dict[m.lib_shelf][m.lib_book][m.lib_page]) with open(self.path_to_library.with_suffix(\".pickle\"), \"wb\") as f: pickle.dump(self.materials_yaml, f, pickle.HIGHEST_PROTOCOL) with open(self.path_to_library.with_suffix(\".pickle2\"), \"wb\") as f: pickle.dump(self.materials_dict, f, pickle.HIGHEST_PROTOCOL) def _load_from_pickle(self): logger.info(\"load from pickle\") t1 = time.time() with open(self.path_to_library.with_suffix(\".pickle\"), \"rb\") as f: self.materials_yaml = pickle.load(f) with open(self.path_to_library.with_suffix(\".pickle2\"), \"rb\") as f: self.materials_dict = pickle.load(f) for sd in self.materials_dict.values(): for bd in sd.values(): for mat in bd.values(): self.materials_list.append(mat) logger.info(f\"... done after{t1-time.time()}s\") def __post_init__(self): upgraded = False # create database folder if it doesn't exist if not self.path_to_library.parent.is_dir(): self.path_to_library.parent.mkdir() if self.auto_upgrade or self.force_upgrade: upgraded = self._download_latest_commit() if self.path_to_library.exists(): if self.path_to_library.with_suffix(\".pickle\").exists() and not upgraded: self._load_from_pickle() else: self._load_from_yaml() self._convert_to_material_dict() else: warnings.warn( \"Path to library does not exist! Please check path or activate auto_upgrade to download.\" ) def search_material_by_page_name( self, page_name: str, exact_match: bool = False ) -> Material | list[Material] | None: \"\"\"Search Material by name Search a Material by page name as given at refractiveindex.info. Sometimes, the name is not unique, so the function returns either a single Material or a list of Materials or None if it doesn't find a match. Args: page_name: name of the material as given as page name on refractiveindex.info exact_match: if True, only exact matches are considered. Default is False. e.g. if False, 'BK7' will return all BK7 glasses, including N-BK7, K-BK7, etc. Returns: Material or list of Materials matching the Name Examples: >>> db = RefractiveIndexLibrary() >>> bk7 = db.search_material_by_page_name('N-BK7')[0] # returns a list of different BK7 glasses >>> print(bk7.get_n(0.5875618)) 1.5168000345005885 \"\"\" materials = [] if exact_match: for m in self.materials_list: if page_name == m.yaml_data.name: materials.append(m) else: for m in self.materials_list: if page_name in m.yaml_data.name: materials.append(m) return ( materials[0] if len(materials) == 1 else materials if len(materials) > 1 else None ) def search_material_by_n( self, n: float, wl: float = 0.5875618, filter_shelf: str | None = None, filter_book: str | None = None, ) -> list[Material]: \"\"\"Search Material by refractive index Look for a material with a specific refractive index at a certain wavelength. In return, you get a sorted list of materials with index [0] being the closest to input n. Args: n: refractive index wl: wavelength filter_shelf: if given, only materials containing this string in their shelf name are considered filter_book: if given, only materials containing this string in their book name are considered Examples: >>> db = RefractiveIndexLibrary() >>> # get 3 closest OHARA glasses with n=1.5 at 0.55microns: >>> materials = db.search_material_by_n(1.5, wl=0.55, filter_book=\"ohara\")[:3] >>> print(materials[0].yaml_data.name, materials[0].get_n(0.55)) BSL3 1.4999474387027893 >>> print(materials[1].yaml_data.name, materials[1].get_n(0.55)) S-FPL51Y 1.498313496038896 >>> print(materials[2].yaml_data.name, materials[2].get_n(0.55)) S-FPL51 1.498303051383454 Returns: sorted list of materials matching search criteria \"\"\" materials = [] materials_n_distance = [] for shelf_m, d in self.materials_dict.items(): if not (shelf_m == filter_shelf or filter_shelf is None): continue for book_name, book_m in d.items(): if filter_book is not None: if filter_book.lower() not in book_name.lower(): continue for mat in book_m.values(): materials.append(mat) try: materials_n_distance.append(abs(mat.get_n(wl) - n)) except ValueError: materials_n_distance.append(99) return [ x for _, x in sorted( zip(materials_n_distance, materials), key=lambda pair: pair[0] ) ] def get_material(self, shelf: str, book: str, page: str) -> Material: \"\"\"Get Material by shelf, book, page name Select Material by specifying shelf, book and page as given on refractiveindex.info Args: shelf: shelf name book: book name page: page name Returns: Material object Examples: >>> db = RefractiveIndexLibrary() >>> bk7 = db.get_material(\"glass\", \"SCHOTT-BK\", \"N-BK7\") >>> print(bk7.get_n(0.5875618)) 1.5168000345005885 \"\"\" return self.materials_dict[shelf][book][page] def get_material_by_path(self, yaml_path: str) -> Material: \"\"\"Get material by path Args: yaml_path: path as shown on refractive index when hovered over 'CSV - comma separated data' Returns: Material object \"\"\" mat_found = [ m for m in self.materials_list if str(m.yaml_data.lib_path).lower().endswith(yaml_path.lower() + \".yml\") ] return mat_found[0] if mat_found else None","title":"RefractiveIndexLibrary"},{"location":"api/#pyindexrepo.main.RefractiveIndexLibrary.get_material","text":"Get Material by shelf, book, page name Select Material by specifying shelf, book and page as given on refractiveindex.info Parameters: shelf ( str ) \u2013 shelf name book ( str ) \u2013 book name page ( str ) \u2013 page name Returns: Material \u2013 Material object Examples: >>> db = RefractiveIndexLibrary() >>> bk7 = db.get_material(\"glass\", \"SCHOTT-BK\", \"N-BK7\") >>> print(bk7.get_n(0.5875618)) 1.5168000345005885 Source code in pyindexrepo/main.py def get_material(self, shelf: str, book: str, page: str) -> Material: \"\"\"Get Material by shelf, book, page name Select Material by specifying shelf, book and page as given on refractiveindex.info Args: shelf: shelf name book: book name page: page name Returns: Material object Examples: >>> db = RefractiveIndexLibrary() >>> bk7 = db.get_material(\"glass\", \"SCHOTT-BK\", \"N-BK7\") >>> print(bk7.get_n(0.5875618)) 1.5168000345005885 \"\"\" return self.materials_dict[shelf][book][page]","title":"get_material"},{"location":"api/#pyindexrepo.main.RefractiveIndexLibrary.get_material_by_path","text":"Get material by path Parameters: yaml_path ( str ) \u2013 path as shown on refractive index when hovered over 'CSV - comma separated data' Returns: Material \u2013 Material object Source code in pyindexrepo/main.py def get_material_by_path(self, yaml_path: str) -> Material: \"\"\"Get material by path Args: yaml_path: path as shown on refractive index when hovered over 'CSV - comma separated data' Returns: Material object \"\"\" mat_found = [ m for m in self.materials_list if str(m.yaml_data.lib_path).lower().endswith(yaml_path.lower() + \".yml\") ] return mat_found[0] if mat_found else None","title":"get_material_by_path"},{"location":"api/#pyindexrepo.main.RefractiveIndexLibrary.search_material_by_n","text":"Search Material by refractive index Look for a material with a specific refractive index at a certain wavelength. In return, you get a sorted list of materials with index [0] being the closest to input n. Parameters: n ( float ) \u2013 refractive index wl ( float , default: 0.5875618 ) \u2013 wavelength filter_shelf ( str | None , default: None ) \u2013 if given, only materials containing this string in their shelf name are considered filter_book ( str | None , default: None ) \u2013 if given, only materials containing this string in their book name are considered Examples: >>> db = RefractiveIndexLibrary() >>> # get 3 closest OHARA glasses with n=1.5 at 0.55microns: >>> materials = db.search_material_by_n(1.5, wl=0.55, filter_book=\"ohara\")[:3] >>> print(materials[0].yaml_data.name, materials[0].get_n(0.55)) BSL3 1.4999474387027893 >>> print(materials[1].yaml_data.name, materials[1].get_n(0.55)) S-FPL51Y 1.498313496038896 >>> print(materials[2].yaml_data.name, materials[2].get_n(0.55)) S-FPL51 1.498303051383454 Returns: list [ Material ] \u2013 sorted list of materials matching search criteria Source code in pyindexrepo/main.py def search_material_by_n( self, n: float, wl: float = 0.5875618, filter_shelf: str | None = None, filter_book: str | None = None, ) -> list[Material]: \"\"\"Search Material by refractive index Look for a material with a specific refractive index at a certain wavelength. In return, you get a sorted list of materials with index [0] being the closest to input n. Args: n: refractive index wl: wavelength filter_shelf: if given, only materials containing this string in their shelf name are considered filter_book: if given, only materials containing this string in their book name are considered Examples: >>> db = RefractiveIndexLibrary() >>> # get 3 closest OHARA glasses with n=1.5 at 0.55microns: >>> materials = db.search_material_by_n(1.5, wl=0.55, filter_book=\"ohara\")[:3] >>> print(materials[0].yaml_data.name, materials[0].get_n(0.55)) BSL3 1.4999474387027893 >>> print(materials[1].yaml_data.name, materials[1].get_n(0.55)) S-FPL51Y 1.498313496038896 >>> print(materials[2].yaml_data.name, materials[2].get_n(0.55)) S-FPL51 1.498303051383454 Returns: sorted list of materials matching search criteria \"\"\" materials = [] materials_n_distance = [] for shelf_m, d in self.materials_dict.items(): if not (shelf_m == filter_shelf or filter_shelf is None): continue for book_name, book_m in d.items(): if filter_book is not None: if filter_book.lower() not in book_name.lower(): continue for mat in book_m.values(): materials.append(mat) try: materials_n_distance.append(abs(mat.get_n(wl) - n)) except ValueError: materials_n_distance.append(99) return [ x for _, x in sorted( zip(materials_n_distance, materials), key=lambda pair: pair[0] ) ]","title":"search_material_by_n"},{"location":"api/#pyindexrepo.main.RefractiveIndexLibrary.search_material_by_page_name","text":"Search Material by name Search a Material by page name as given at refractiveindex.info. Sometimes, the name is not unique, so the function returns either a single Material or a list of Materials or None if it doesn't find a match. Parameters: page_name ( str ) \u2013 name of the material as given as page name on refractiveindex.info exact_match ( bool , default: False ) \u2013 if True, only exact matches are considered. Default is False. e.g. if False, Returns: Material | list [ Material ] | None \u2013 Material or list of Materials matching the Name Examples: >>> db = RefractiveIndexLibrary() >>> bk7 = db.search_material_by_page_name('N-BK7')[0] # returns a list of different BK7 glasses >>> print(bk7.get_n(0.5875618)) 1.5168000345005885 Source code in pyindexrepo/main.py def search_material_by_page_name( self, page_name: str, exact_match: bool = False ) -> Material | list[Material] | None: \"\"\"Search Material by name Search a Material by page name as given at refractiveindex.info. Sometimes, the name is not unique, so the function returns either a single Material or a list of Materials or None if it doesn't find a match. Args: page_name: name of the material as given as page name on refractiveindex.info exact_match: if True, only exact matches are considered. Default is False. e.g. if False, 'BK7' will return all BK7 glasses, including N-BK7, K-BK7, etc. Returns: Material or list of Materials matching the Name Examples: >>> db = RefractiveIndexLibrary() >>> bk7 = db.search_material_by_page_name('N-BK7')[0] # returns a list of different BK7 glasses >>> print(bk7.get_n(0.5875618)) 1.5168000345005885 \"\"\" materials = [] if exact_match: for m in self.materials_list: if page_name == m.yaml_data.name: materials.append(m) else: for m in self.materials_list: if page_name in m.yaml_data.name: materials.append(m) return ( materials[0] if len(materials) == 1 else materials if len(materials) > 1 else None )","title":"search_material_by_page_name"},{"location":"api/#pyindexrepo.main.Specs","text":"A dataclass representing material specifications. Attributes: n_is_absolute ( bool ) \u2013 Indicates whether the refractive index is given in absolute units. True if it is, False if not, and None if unspecified. wavelength_is_vacuum ( bool ) \u2013 Specifies whether the wavelength is given in vacuum. True if it is, False if not, and None if unspecified. temperature ( float ) \u2013 The temperature of the material in degrees Celsius. None if unspecified. thermal_dispersion ( ThermalDispersion ) \u2013 An instance of the ThermalDispersion class representing thermal dispersion information. None if unspecified. nd ( float ) \u2013 The refractive index (n) of the material. None if unspecified. Vd ( float ) \u2013 The Abbe number (Vd) of the material. None if unspecified. glass_code ( float ) \u2013 The glass code associated with the material. None if unspecified. glass_status ( str ) \u2013 The status or classification of the glass material as a string. None if unspecified. density ( float ) \u2013 The density of the material. None if unspecified. thermal_expansion ( List [ ThermalExpansion ] ) \u2013 A list of instances of the ThermalExpansion class representing thermal expansion properties. None if unspecified. climatic_resistance ( float ) \u2013 The material's resistance to climatic conditions. None if unspecified. stain_resistance ( float ) \u2013 The material's resistance to staining. None if unspecified. acid_resistance ( float ) \u2013 The material's resistance to acids. None if unspecified. alkali_resistance ( float ) \u2013 The material's resistance to alkalis. None if unspecified. phosphate_resistance ( float ) \u2013 The material's resistance to phosphates. None if unspecified. Source code in pyindexrepo/main.py @dataclass class Specs: \"\"\" A dataclass representing material specifications. Attributes: n_is_absolute (bool, optional): Indicates whether the refractive index is given in absolute units. True if it is, False if not, and None if unspecified. wavelength_is_vacuum (bool, optional): Specifies whether the wavelength is given in vacuum. True if it is, False if not, and None if unspecified. temperature (float, optional): The temperature of the material in degrees Celsius. None if unspecified. thermal_dispersion (ThermalDispersion, optional): An instance of the ThermalDispersion class representing thermal dispersion information. None if unspecified. nd (float, optional): The refractive index (n) of the material. None if unspecified. Vd (float, optional): The Abbe number (Vd) of the material. None if unspecified. glass_code (float, optional): The glass code associated with the material. None if unspecified. glass_status (str, optional): The status or classification of the glass material as a string. None if unspecified. density (float, optional): The density of the material. None if unspecified. thermal_expansion (List[ThermalExpansion], optional): A list of instances of the ThermalExpansion class representing thermal expansion properties. None if unspecified. climatic_resistance (float, optional): The material's resistance to climatic conditions. None if unspecified. stain_resistance (float, optional): The material's resistance to staining. None if unspecified. acid_resistance (float, optional): The material's resistance to acids. None if unspecified. alkali_resistance (float, optional): The material's resistance to alkalis. None if unspecified. phosphate_resistance (float, optional): The material's resistance to phosphates. None if unspecified. \"\"\" n_is_absolute: bool | None = None wavelength_is_vacuum: bool | None = None temperature: float | None = None thermal_dispersion: ThermalDispersion | None = None nd: float | None = None Vd: float | None = None glass_code: float | None = None glass_status: str | None = None density: float | None = None thermal_expansion: List[ThermalExpansion] | None = None climatic_resistance: float | None = None stain_resistance: float | None = None acid_resistance: float | None = None alkali_resistance: float | None = None phosphate_resistance: float | None = None @staticmethod def read_specs_from_yaml(specs_dict): # Parse ThermalDispersion objects thermal_dispersion_list = [] if \"thermal_dispersion\" in specs_dict: for td_dict in specs_dict[\"thermal_dispersion\"]: if td_dict.get(\"type\") == \"Schott formula\": td = ThermalDispersion( formula_type=td_dict[\"type\"], coefficients=( np.array( [float(val) for val in td_dict[\"coefficients\"].split()], dtype=float, ) if td_dict.get(\"coefficients\") else None ), ) elif td_dict.get(\"type\") == \"dn/dT\": td = ThermalDispersion( formula_type=td_dict[\"type\"], coefficients=float(td_dict[\"value\"].split()[0]), ) else: td = None warning( f\"Thermal Dispersion formula {td_dict.get('type')} not implemented yet\" ) thermal_dispersion_list.append(td) if len(thermal_dispersion_list) > 1: warnings.warn( \"There are multiple values given for the thermal dispersion. This is not supported at the moment.\" ) # Parse TemperatureRange objects temperature_range_list = [] if \"thermal_expansion\" in specs_dict: for tr_dict in specs_dict[\"thermal_expansion\"]: if isinstance(tr_dict, dict): if tr_dict.get(\"temperature_range\"): tr = TemperatureRange( tr_dict[\"temperature_range\"][0], tr_dict[\"temperature_range\"][1], ) else: tr = None else: tr = None temperature_range_list.append(tr) temperature = specs_dict.get(\"temperature\") if temperature is not None: if isinstance(temperature, str): # if in Kelvin, convert to Celsius if \"K\" in temperature: temperature = float(temperature.split()[0]) - 273.15 elif \"C\" in temperature: temperature = float(temperature.split()[0]) else: temperature = float(temperature.split()[0]) - 273.15 warnings.warn( \"Temperature unit not recognized or given. Assuming Kelvin.\" ) elif isinstance(temperature, int): temperature = float(temperature) elif isinstance(temperature, float): pass else: warnings.warn( f\"Temperature is not a string or an integer/float. {temperature}\" ) # Create Specs dataclass instance specs = Specs( n_is_absolute=specs_dict.get(\"n_is_absolute\"), wavelength_is_vacuum=specs_dict.get(\"wavelength_is_vacuum\"), temperature=temperature, thermal_dispersion=( thermal_dispersion_list[0] if thermal_dispersion_list else None ), nd=specs_dict.get(\"nd\"), Vd=specs_dict.get(\"Vd\"), glass_code=specs_dict.get(\"glass_code\"), glass_status=specs_dict.get(\"glass_status\"), density=( float(specs_dict.get(\"density\").replace(\" g/cm<sup>3</sup>\", \"\")) if specs_dict.get(\"density\") else None ), thermal_expansion=( [ ThermalExpansion( temperature_range=tr, coefficient=( te_dict.get(\"coefficient\") or te_dict.get(\"value\") if isinstance(te_dict, dict) else None ), ) for tr, te_dict in zip( temperature_range_list, specs_dict[\"thermal_expansion\"] ) ] if specs_dict.get(\"thermal_expansion\") else None ), climatic_resistance=specs_dict.get(\"climatic_resistance\"), stain_resistance=specs_dict.get(\"stain_resistance\"), acid_resistance=specs_dict.get(\"acid_resistance\"), alkali_resistance=specs_dict.get(\"alkali_resistance\"), phosphate_resistance=specs_dict.get(\"phosphate_resistance\"), ) return specs def get_coefficient_of_thermal_expansion(self, temperature: float) -> float: \"\"\"Returns the coefficient of thermal expansion for a given temperature.\"\"\" if self.thermal_expansion is not None: # sort by total temperature range and return coefficient for smallest range self.thermal_expansion.sort( key=lambda exp: exp.temperature_range.max - exp.temperature_range.min ) for expansion in self.thermal_expansion: if ( expansion.temperature_range.min <= temperature <= expansion.temperature_range.max ): return expansion.coefficient # if temperature is outside any temperature range, return the value for the closest temperature range self.thermal_expansion.sort( key=lambda exp, t: min( abs(t - exp.temperature_range.max), abs(t - exp.temperature_range.min), ) ) warnings.warn( \"Temperature is outside any temperature range, returning closest value as coefficient\" ) return self.thermal_expansion[0].coefficient else: warnings.warn(\"No thermal expansion data. Returning 0.0\") return 0.0","title":"Specs"},{"location":"api/#pyindexrepo.main.Specs.get_coefficient_of_thermal_expansion","text":"Returns the coefficient of thermal expansion for a given temperature. Source code in pyindexrepo/main.py def get_coefficient_of_thermal_expansion(self, temperature: float) -> float: \"\"\"Returns the coefficient of thermal expansion for a given temperature.\"\"\" if self.thermal_expansion is not None: # sort by total temperature range and return coefficient for smallest range self.thermal_expansion.sort( key=lambda exp: exp.temperature_range.max - exp.temperature_range.min ) for expansion in self.thermal_expansion: if ( expansion.temperature_range.min <= temperature <= expansion.temperature_range.max ): return expansion.coefficient # if temperature is outside any temperature range, return the value for the closest temperature range self.thermal_expansion.sort( key=lambda exp, t: min( abs(t - exp.temperature_range.max), abs(t - exp.temperature_range.min), ) ) warnings.warn( \"Temperature is outside any temperature range, returning closest value as coefficient\" ) return self.thermal_expansion[0].coefficient else: warnings.warn(\"No thermal expansion data. Returning 0.0\") return 0.0","title":"get_coefficient_of_thermal_expansion"},{"location":"api/#pyindexrepo.main.TabulatedIndexData","text":"A dataclass representing tabulated index data. Attributes: wl ( ndarray | list [ float ] ) \u2013 An array or list containing wavelength values (in nm). n_or_k ( ndarray | list [ float ] ) \u2013 An array or list containing refractive index (n) or extinction coefficient (k) values. ip ( ( callable , read - only ) ) \u2013 A callable property to perform interpolation on the data. use_interpolation ( bool ) \u2013 Indicates whether to use interpolation when querying values. True to use interpolation, False to disable interpolation. Default is True. bounds_error ( bool ) \u2013 Indicates whether to raise an error for out-of-bounds queries. True to raise an error, False to suppress errors. Default is True. Source code in pyindexrepo/main.py @dataclass class TabulatedIndexData: \"\"\" A dataclass representing tabulated index data. Attributes: wl (np.ndarray | list[float]): An array or list containing wavelength values (in nm). n_or_k (np.ndarray | list[float]): An array or list containing refractive index (n) or extinction coefficient (k) values. ip (callable, read-only): A callable property to perform interpolation on the data. use_interpolation (bool, optional): Indicates whether to use interpolation when querying values. True to use interpolation, False to disable interpolation. Default is True. bounds_error (bool, optional): Indicates whether to raise an error for out-of-bounds queries. True to raise an error, False to suppress errors. Default is True. \"\"\" wl: np.ndarray | list[float] n_or_k: np.ndarray | list[float] ip: callable = field(init=False) use_interpolation: bool = field(default=True) bounds_error: bool = field(default=True) def __post_init__(self): if self.use_interpolation: self.ip = interp1d( np.atleast_1d(self.wl), np.atleast_1d(self.n_or_k), bounds_error=self.bounds_error, ) def get_n_or_k(self, wavelength): return self.ip(wavelength)","title":"TabulatedIndexData"},{"location":"api/#pyindexrepo.main.ThermalDispersion","text":"Thermal Dispersion Deals with thermal dispersion of material. For a given formula_type and coefficients, delta_n_abs points to a function that is called with the arguments (n_ref, wavelength, coefficients*), where n_ref is the refractive index at reference temperature, wavelength the wavelength(s) value(s) and coefficients the array of the thermal dispersion coefficients. For speed reasons, the function delta_n_abs is outsourced to the dispersion_formulas.py file and speed up by numba. Attributes: formula_type ( str | None ) \u2013 name of the formula. Supported are 'Schott formula' coefficients ( ndarray | float | None ) \u2013 array with thermal dispersion coefficients (lengths depends on formula type) delta_n_abs ( callable ) \u2013 function called with the arguments (n_ref, wavelength, coefficients*) Source code in pyindexrepo/main.py @dataclass class ThermalDispersion: \"\"\"Thermal Dispersion Deals with thermal dispersion of material. For a given formula_type and coefficients, delta_n_abs points to a function that is called with the arguments (n_ref, wavelength, coefficients*), where n_ref is the refractive index at reference temperature, wavelength the wavelength(s) value(s) and coefficients the array of the thermal dispersion coefficients. For speed reasons, the function delta_n_abs is outsourced to the dispersion_formulas.py file and speed up by numba. Attributes: formula_type: name of the formula. Supported are 'Schott formula' coefficients: array with thermal dispersion coefficients (lengths depends on formula type) delta_n_abs: function called with the arguments (n_ref, wavelength, coefficients*) \"\"\" formula_type: str | None = None coefficients: np.ndarray | float | None = None delta_n_abs: callable = field(init=False) def __post_init__(self): if self.formula_type == \"Schott formula\": self.delta_n_abs = getattr( dispersion_formulas, \"delta_absolute_temperature\" ) elif self.formula_type == \"dn/dT\": self.delta_n_abs = getattr( dispersion_formulas, \"n_absolute_with_given_dndt\" ) else: logger.warning(\"Thermal Dispersion formula not implemented yet\")","title":"ThermalDispersion"},{"location":"api/#pyindexrepo.main.ThermalExpansion","text":"Thermal expansion Deals with thermal expansion of the material. Attributes: temperature_range: temperature range where thermal expansion coefficient is considered valid coefficient: thermal expansion coefficient [1/K] Source code in pyindexrepo/main.py @dataclass class ThermalExpansion: \"\"\"Thermal expansion Deals with thermal expansion of the material. Attributes: temperature_range: temperature range where thermal expansion coefficient is considered valid coefficient: thermal expansion coefficient [1/K] \"\"\" temperature_range: TemperatureRange coefficient: float","title":"ThermalExpansion"},{"location":"api/#pyindexrepo.main.YAMLMaterialData","text":"A dataclass representing material data in YAML format. Attributes: n_data ( YAMLRefractiveIndexData ) \u2013 An instance of YAMLRefractiveIndexData containing refractive index (n) data. k_data ( YAMLRefractiveIndexData ) \u2013 An instance of YAMLRefractiveIndexData containing extinction coefficient (k) data. comments ( str ) \u2013 Additional comments or notes related to the material data. Default is an empty string, indicating no comments. references ( str ) \u2013 References or sources of information for the material data. Default is an empty string, indicating no references. Source code in pyindexrepo/main.py @dataclass class YAMLMaterialData: \"\"\" A dataclass representing material data in YAML format. Attributes: n_data (YAMLRefractiveIndexData): An instance of YAMLRefractiveIndexData containing refractive index (n) data. k_data (YAMLRefractiveIndexData): An instance of YAMLRefractiveIndexData containing extinction coefficient (k) data. comments (str, optional): Additional comments or notes related to the material data. Default is an empty string, indicating no comments. references (str, optional): References or sources of information for the material data. Default is an empty string, indicating no references. \"\"\" n_data: YAMLRefractiveIndexData k_data: YAMLRefractiveIndexData comments: str = field(default=\"\") references: str = field(default=\"\")","title":"YAMLMaterialData"},{"location":"api/#pyindexrepo.main.YAMLRefractiveIndexData","text":"A dataclass representing refractive index data in YAML format. Attributes: data_type ( str ) \u2013 The type of refractive index data, such as 'tabulated', 'formula', etc. wavelength_range ( str ) \u2013 The range of wavelengths for which the data is valid. Default is an empty string, indicating unspecified range. coefficients ( str ) \u2013 A string containing coefficients or formula details for formula-based data. Default is an empty string, indicating unspecified coefficients. data ( str ) \u2013 A string containing the actual data in YAML format. Default is an empty string, indicating unspecified data. Source code in pyindexrepo/main.py @dataclass class YAMLRefractiveIndexData: \"\"\" A dataclass representing refractive index data in YAML format. Attributes: data_type (str): The type of refractive index data, such as 'tabulated', 'formula', etc. wavelength_range (str, optional): The range of wavelengths for which the data is valid. Default is an empty string, indicating unspecified range. coefficients (str, optional): A string containing coefficients or formula details for formula-based data. Default is an empty string, indicating unspecified coefficients. data (str, optional): A string containing the actual data in YAML format. Default is an empty string, indicating unspecified data. \"\"\" data_type: str wavelength_range: str = field(default=\"\") coefficients: str = field(default=\"\") data: str = field(default=\"\")","title":"YAMLRefractiveIndexData"},{"location":"api/#pyindexrepo.main.yaml_to_material","text":"Converts RefractiveIndex.info YAML to Material Reads a yaml file of the refractiveindex database and converts it to a Material object. Parameters: filepath ( str | Path ) \u2013 path to yaml file lib_shelf ( str ) \u2013 RefractiveIndex.info shelf name lib_book ( str ) \u2013 RefractiveIndex.info book name lib_page ( str ) \u2013 RefractiveIndex.info page name lib_name ( str ) \u2013 RefractiveIndex.info material name Returns: Material | None \u2013 Material object Source code in pyindexrepo/main.py def yaml_to_material( filepath: str | Path, lib_shelf: str, lib_book: str, lib_page: str, lib_name: str ) -> Material | None: \"\"\"Converts RefractiveIndex.info YAML to Material Reads a yaml file of the refractiveindex database and converts it to a Material object. Args: filepath: path to yaml file lib_shelf: RefractiveIndex.info shelf name lib_book: RefractiveIndex.info book name lib_page: RefractiveIndex.info page name lib_name: RefractiveIndex.info material name Returns: Material object \"\"\" if isinstance(filepath, str): filepath = Path(filepath) def fill_variables_from_data_dict(data): \"\"\"Helper function to split data in yaml into Material attributes\"\"\" data_type = data[\"type\"] _wl_min = _wl_max = _wl = _n = _k = _coefficients = _formula = None if data_type == \"tabulated nk\": _wl, _n, _k = np.loadtxt(data[\"data\"].split(\"\\n\")).T _wl_min = np.min(_wl) _wl_max = np.max(_wl) elif data_type == \"tabulated n\": ( _wl, _n, ) = np.loadtxt(data[\"data\"].split(\"\\n\")).T _wl_min = np.min(_wl) _wl_max = np.max(_wl) elif data_type == \"tabulated k\": ( _wl, _k, ) = np.loadtxt(data[\"data\"].split(\"\\n\")).T _wl_min = np.min(_wl) _wl_max = np.max(_wl) elif \"formula\" in data_type: _wl_range = data.get(\"wavelength_range\") or data.get(\"range\") _wl_min, _wl_max = _wl_range if _wl_range is not None else None, None _coefficients = np.array([float(c) for c in data[\"coefficients\"].split()]) _formula = data[\"type\"].split()[1] # else: # logger.warning(f\"Could not convert YAML data for datatype {data_type}\") return _wl, _wl_min, _wl_max, _n, _k, _coefficients, _formula with open(filepath) as f: n_class = k_class = None try: d = yaml.safe_load(f) # fill core data from yaml file ( wl_n, wl_min_n, wl_max_n, n, k, coefficients, formula, ) = fill_variables_from_data_dict(d[\"DATA\"][0]) if formula: n_class = FormulaIndexData( getattr(dispersion_formulas, f\"formula_{formula}\"), coefficients, wl_min_n, wl_max_n, ) elif n is not None: n_class = TabulatedIndexData(wl_n, n, True, True) ( wl_k, wl_min_k, wl_max_k, _, k, coefficients_k, formula_k, ) = fill_variables_from_data_dict(next(iter(d[\"DATA\"][1:2]), {\"type\": \"\"})) if formula_k: k_class = FormulaIndexData( getattr(dispersion_formulas, f\"formula_{formula}\"), coefficients_k, wl_min_k, wl_max_k, ) elif k is not None: k_class = TabulatedIndexData(wl_k, k, True, True) # fill additional spec data if present specs = d.get(\"SPECS\", None) if specs is not None: logger.debug(specs) specs = Specs.read_specs_from_yaml(specs) except ScannerError: logger.warning(f\"Could not read data in {filepath}\") return None except ValueError: logger.warning(f\"Could not read data in {filepath} due to bad data\") return None return Material( n_class, k_class, specs, YAMLLibraryData( lib_name, yaml.dump(d), lib_shelf, lib_book, lib_page, filepath ), )","title":"yaml_to_material"},{"location":"api/#pyindexrepo.dispersion_formulas.absolute_to_relative","text":"Converts absolute refractive index to relative Formula (5) of Schott TIE-19 Parameters: n_abs ( float | ndarray ) \u2013 absolute refractive index. wl ( float | ndarray ) \u2013 wavelength [micron] T ( float , default: 20.0 ) \u2013 Temperature [\u00b0Celsius] of absolute data P ( float , default: 0.10133 ) \u2013 Pressure [MPa] Returns: Source code in pyindexrepo/dispersion_formulas.py @njit(cache=True) def absolute_to_relative( n_abs: float | np.ndarray, wl: float | np.ndarray, T: float = 20.0, P: float = 0.10133, ): \"\"\"Converts absolute refractive index to relative Formula (5) of [Schott TIE-19](https://www.schott.com/en-gb/products/optical-glass-p1000267/downloads) Args: n_abs: absolute refractive index. wl: wavelength [micron] T: Temperature [\u00b0Celsius] of absolute data P: Pressure [MPa] Returns: \"\"\" return n_abs / n_air(wl, T, P)","title":"absolute_to_relative"},{"location":"api/#pyindexrepo.dispersion_formulas.delta_absolute_temperature","text":"deltaT of absolute refractive index at certain Temperature Returns the temperature coefficient of the absolute refractive index for given wavelength and temperature Formula (3) of Schott TIE-19 Parameters: n_abs_ref ( float | ndarray ) \u2013 absolute refractive index at reference temperature wl ( float | ndarray ) \u2013 wavelength in vacuum [micron] dT ( float ) \u2013 temperature difference between reference and actual temperature D0 ( float ) \u2013 constant depending on material D1 ( float ) \u2013 constant depending on material D2 ( float ) \u2013 constant depending on material E0 ( float ) \u2013 constant depending on material E1 ( float ) \u2013 constant depending on material w_tk ( float ) \u2013 constant depending on material Returns: Source code in pyindexrepo/dispersion_formulas.py @njit(cache=True) def delta_absolute_temperature( n_abs_ref: float | np.ndarray, wl: float | np.ndarray, dT: float, D0: float, D1: float, D2: float, E0: float, E1: float, w_tk: float, ): \"\"\"deltaT of absolute refractive index at certain Temperature Returns the temperature coefficient of the absolute refractive index for given wavelength and temperature Formula (3) of [Schott TIE-19](https://www.schott.com/en-gb/products/optical-glass-p1000267/downloads) Args: n_abs_ref: absolute refractive index at reference temperature wl: wavelength in vacuum [micron] dT: temperature difference between reference and actual temperature D0: constant depending on material D1: constant depending on material D2: constant depending on material E0: constant depending on material E1: constant depending on material w_tk: constant depending on material Returns: \"\"\" return ( (n_abs_ref**2 - 1.0) / (2.0 * n_abs_ref) * ( D0 * dT + D1 * dT**2 + D2 * dT**3 + (E0 * dT + E1 * dT**2) / (wl**2 - w_tk**2) ) )","title":"delta_absolute_temperature"},{"location":"api/#pyindexrepo.dispersion_formulas.dn_absolute_temperature","text":"dn/dT of absolute refractive index at certain Temperature Returns the temperature coefficient of the absolute refractive index for given wavelength and temperature Formula (2) of Schott TIE-19 Parameters: n_abs_ref ( float | ndarray ) \u2013 absolute refractive index at reference temperature wl ( float | ndarray ) \u2013 wavelength in vacuum [micron] dT ( float ) \u2013 temperature difference between reference and actual temperature D0 ( float ) \u2013 constant depending on material D1 ( float ) \u2013 constant depending on material D2 ( float ) \u2013 constant depending on material E0 ( float ) \u2013 constant depending on material E1 ( float ) \u2013 constant depending on material w_tk ( float ) \u2013 constant depending on material Returns: Source code in pyindexrepo/dispersion_formulas.py @njit(cache=True) def dn_absolute_temperature( n_abs_ref: float | np.ndarray, wl: float | np.ndarray, dT: float, D0: float, D1: float, D2: float, E0: float, E1: float, w_tk: float, ): \"\"\"dn/dT of absolute refractive index at certain Temperature Returns the temperature coefficient of the absolute refractive index for given wavelength and temperature Formula (2) of [Schott TIE-19](https://www.schott.com/en-gb/products/optical-glass-p1000267/downloads) Args: n_abs_ref: absolute refractive index at reference temperature wl: wavelength in vacuum [micron] dT: temperature difference between reference and actual temperature D0: constant depending on material D1: constant depending on material D2: constant depending on material E0: constant depending on material E1: constant depending on material w_tk: constant depending on material Returns: \"\"\" return ( (n_abs_ref**2 - 1.0) / (2.0 * n_abs_ref) * ( D0 + 2.0 * D1 * dT + 3 * D2 * dT**2 + ((E0 + 2 * E1 * dT) / (wl**2 - w_tk**2)) ) )","title":"dn_absolute_temperature"},{"location":"api/#pyindexrepo.dispersion_formulas.dn_dt_air","text":"Temperature coefficient dn/dT of air Calculates the temperature dependence of the refractive index of air as given in Schott TIE-19 - Formula (10): Parameters: wl ( float | ndarray ) \u2013 wavelength T ( float ) \u2013 air temperature [\u00b0Celsius] P ( float ) \u2013 air pressure [MPa] Returns: \u2013 dn/dT of air Source code in pyindexrepo/dispersion_formulas.py @njit(cache=True) def dn_dt_air(wl: float | np.ndarray, T: float, P: float): \"\"\"Temperature coefficient dn/dT of air Calculates the temperature dependence of the refractive index of air as given in [Schott TIE-19](https://www.schott.com/en-gb/products/optical-glass-p1000267/downloads) - Formula (10): Args: wl: wavelength T: air temperature [\u00b0Celsius] P: air pressure [MPa] Returns: dn/dT of air \"\"\" return -0.00367 * (n_air(wl, T, P) - 1.0) / (1.0 + 0.00367 * T)","title":"dn_dt_air"},{"location":"api/#pyindexrepo.dispersion_formulas.formula_1","text":"Sellmeier (preferred) dispersion formula The formula has the general form: \\[ {n}^{2}-1={C}_{1}+\\frac{{C}_{2}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{3}^{2}}+\\frac{{C}_{4}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{5}^{2}}+\\frac{{C}_{6}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{7}^{2}}+\\frac{{C}_{8}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{9}^{2}}+\\frac{{C}_{10}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{11}^{2}}+\\frac{{C}_{12}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{13}^{2}}+\\frac{{C}_{14}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{15}^{2}}+\\frac{{C}_{16}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{17}^{2}} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_1(wavelength, coefficients): r\"\"\"Sellmeier (preferred) dispersion formula The formula has the general form: $$ {n}^{2}-1={C}_{1}+\\frac{{C}_{2}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{3}^{2}}+\\frac{{C}_{4}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{5}^{2}}+\\frac{{C}_{6}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{7}^{2}}+\\frac{{C}_{8}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{9}^{2}}+\\frac{{C}_{10}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{11}^{2}}+\\frac{{C}_{12}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{13}^{2}}+\\frac{{C}_{14}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{15}^{2}}+\\frac{{C}_{16}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{17}^{2}} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" nsq = np.ones_like(wavelength) + coefficients[0] for i in range(1, len(coefficients), 2): nsq = nsq + formula_1_helper(wavelength, coefficients[i], coefficients[i + 1]) return np.sqrt(nsq)","title":"formula_1"},{"location":"api/#pyindexrepo.dispersion_formulas.formula_2","text":"Sellmeier-2 dispersion formula. The formula has the general form: \\[ {n}^{2}-1={C}_{1}+\\frac{{C}_{2}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{3}}+\\frac{{C}_{4}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{5}}+\\frac{{C}_{6}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{7}}+\\frac{{C}_{8}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{9}}+\\frac{{C}_{10}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{11}}+\\frac{{C}_{12}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{13}}+\\frac{{C}_{14}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{15}}+\\frac{{C}_{16}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{17}} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_2(wavelength, coefficients): r\"\"\"Sellmeier-2 dispersion formula. The formula has the general form: $$ {n}^{2}-1={C}_{1}+\\frac{{C}_{2}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{3}}+\\frac{{C}_{4}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{5}}+\\frac{{C}_{6}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{7}}+\\frac{{C}_{8}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{9}}+\\frac{{C}_{10}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{11}}+\\frac{{C}_{12}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{13}}+\\frac{{C}_{14}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{15}}+\\frac{{C}_{16}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{17}} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" nsq = np.ones_like(wavelength) + coefficients[0] for i in range(1, len(coefficients), 2): nsq = nsq + formula_2_helper(wavelength, coefficients[i], coefficients[i + 1]) return np.sqrt(nsq)","title":"formula_2"},{"location":"api/#pyindexrepo.dispersion_formulas.formula_3","text":"Polynomial dispersion formula. The formula has the general form: \\[ {n}^{2}={C}_{1}+{C}_{2}{\\lambda }^{{C}_{3}}+{C}_{4}{\\lambda }^{{C}_{5}}+{C}_{6}{\\lambda }^{{C}_{7}}+{C}_{8}{\\lambda }^{{C}_{9}}+{C}_{10}{\\lambda }^{{C}_{11}}+{C}_{12}{\\lambda }^{{C}_{13}}+{C}_{14}{\\lambda }^{{C}_{15}}+{C}_{16}{\\lambda }^{{C}_{17}} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_3(wavelength, coefficients): r\"\"\"Polynomial dispersion formula. The formula has the general form: $$ {n}^{2}={C}_{1}+{C}_{2}{\\lambda }^{{C}_{3}}+{C}_{4}{\\lambda }^{{C}_{5}}+{C}_{6}{\\lambda }^{{C}_{7}}+{C}_{8}{\\lambda }^{{C}_{9}}+{C}_{10}{\\lambda }^{{C}_{11}}+{C}_{12}{\\lambda }^{{C}_{13}}+{C}_{14}{\\lambda }^{{C}_{15}}+{C}_{16}{\\lambda }^{{C}_{17}} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" nsq = np.ones_like(wavelength) * coefficients[0] for i in range(1, len(coefficients), 2): nsq = nsq + formula_3457_helper( wavelength, coefficients[i], coefficients[i + 1] ) return np.sqrt(nsq)","title":"formula_3"},{"location":"api/#pyindexrepo.dispersion_formulas.formula_4","text":"RefractiveIndex.INFO dispersion formula The formula has the general form: \\[ {n}^{2}={C}_{1}+\\frac{{C}_{2}{\\lambda }^{{C}_{3}}}{{\\lambda }^{2}-{C}_{4}^{{C}_{5}}}+\\frac{{C}_{6}{\\lambda }^{{C}_{7}}}{{\\lambda }^{2}-{C}_{8}^{{C}_{9}}}+{C}_{10}{\\lambda }^{{C}_{11}}+{C}_{12}{\\lambda }^{{C}_{13}}+{C}_{14}{\\lambda }^{{C}_{15}}+{C}_{16}{\\lambda }^{{C}_{17}} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_4(wavelength, coefficients): r\"\"\"RefractiveIndex.INFO dispersion formula The formula has the general form: $$ {n}^{2}={C}_{1}+\\frac{{C}_{2}{\\lambda }^{{C}_{3}}}{{\\lambda }^{2}-{C}_{4}^{{C}_{5}}}+\\frac{{C}_{6}{\\lambda }^{{C}_{7}}}{{\\lambda }^{2}-{C}_{8}^{{C}_{9}}}+{C}_{10}{\\lambda }^{{C}_{11}}+{C}_{12}{\\lambda }^{{C}_{13}}+{C}_{14}{\\lambda }^{{C}_{15}}+{C}_{16}{\\lambda }^{{C}_{17}} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" nsq = np.zeros_like(wavelength) + coefficients[0] for i in range(1, min(9, len(coefficients)), 4): nsq = nsq + formula_4_helper1( wavelength, coefficients[i], coefficients[i + 1], coefficients[i + 2], coefficients[i + 3], ) if len(coefficients) > 8: for i in range(9, len(coefficients), 2): nsq = nsq + formula_3457_helper( wavelength, coefficients[i], coefficients[i + 1] ) return np.sqrt(nsq)","title":"formula_4"},{"location":"api/#pyindexrepo.dispersion_formulas.formula_5","text":"Cauchy dispersion formula The formula has the general form: \\[ n={C}_{1}+{C}_{2}{\\lambda }^{{C}_{3}}+{C}_{4}{\\lambda }^{{C}_{5}}+{C}_{6}{\\lambda }^{{C}_{7}}+{C}_{8}{\\lambda }^{{C}_{9}}+{C}_{10}{\\lambda }^{{C}_{11}} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_5(wavelength, coefficients): r\"\"\"Cauchy dispersion formula The formula has the general form: $$ n={C}_{1}+{C}_{2}{\\lambda }^{{C}_{3}}+{C}_{4}{\\lambda }^{{C}_{5}}+{C}_{6}{\\lambda }^{{C}_{7}}+{C}_{8}{\\lambda }^{{C}_{9}}+{C}_{10}{\\lambda }^{{C}_{11}} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" n = np.zeros_like(wavelength) + coefficients[0] for i in range(1, len(coefficients), 2): n = n + formula_3457_helper(wavelength, coefficients[i], coefficients[i + 1]) return n","title":"formula_5"},{"location":"api/#pyindexrepo.dispersion_formulas.formula_6","text":"Gases dispersion formula The formula has the general form: \\[ n-1={C}_{1}+\\frac{{C}_{2}}{{C}_{3}-{\\lambda }^{-2}}+\\frac{{C}_{4}}{{C}_{5}-{\\lambda }^{-2}}+\\frac{{C}_{6}}{{C}_{7}-{\\lambda }^{-2}}+\\frac{{C}_{8}}{{C}_{9}-{\\lambda }^{-2}}+\\frac{{C}_{10}}{{C}_{11}-{\\lambda }^{-2}} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_6(wavelength, coefficients): r\"\"\"Gases dispersion formula The formula has the general form: $$ n-1={C}_{1}+\\frac{{C}_{2}}{{C}_{3}-{\\lambda }^{-2}}+\\frac{{C}_{4}}{{C}_{5}-{\\lambda }^{-2}}+\\frac{{C}_{6}}{{C}_{7}-{\\lambda }^{-2}}+\\frac{{C}_{8}}{{C}_{9}-{\\lambda }^{-2}}+\\frac{{C}_{10}}{{C}_{11}-{\\lambda }^{-2}} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" n = np.ones_like(wavelength) + coefficients[0] for i in range(1, len(coefficients), 2): n = n + formula_6_helper(wavelength, coefficients[i], coefficients[i + 1]) return n","title":"formula_6"},{"location":"api/#pyindexrepo.dispersion_formulas.formula_7","text":"Herzberger dispersion formula The formula has the general form: \\[ n={C}_{1}+\\frac{{C}_{2}}{{\\lambda }^{2}-0.028}+{C}_{3}{\\left(\\frac{1}{{\\lambda }^{2}-0.028}\\right)}^{2}+{C}_{4}{\\lambda }^{2}+{C}_{5}{\\lambda }^{4}+{C}_{6}{\\lambda }^{6} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_7(wavelength, coefficients): r\"\"\"Herzberger dispersion formula The formula has the general form: $$ n={C}_{1}+\\frac{{C}_{2}}{{\\lambda }^{2}-0.028}+{C}_{3}{\\left(\\frac{1}{{\\lambda }^{2}-0.028}\\right)}^{2}+{C}_{4}{\\lambda }^{2}+{C}_{5}{\\lambda }^{4}+{C}_{6}{\\lambda }^{6} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" n = np.zeros_like(wavelength) + coefficients[0] n = n + formula_7_helper1(wavelength, coefficients[1], 1) n = n + formula_7_helper1(wavelength, coefficients[2], 2) for i in range(3, len(coefficients)): n = n + formula_3457_helper(wavelength, coefficients[i], float64(2 * (i - 2))) return n","title":"formula_7"},{"location":"api/#pyindexrepo.dispersion_formulas.formula_8","text":"Formula 8 dispersion formula from refractiveindex.info The formula has the general form: \\[ \\frac{{n}^{2}-1}{{n}^{2}+2}={C}_{1}+\\frac{{C}_{2}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{3}}+{C}_{4}{\\lambda }^{2} \\] Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_8(wavelength, coefficients): r\"\"\"Formula 8 dispersion formula from refractiveindex.info The formula has the general form: $$ \\frac{{n}^{2}-1}{{n}^{2}+2}={C}_{1}+\\frac{{C}_{2}{\\lambda }^{2}}{{\\lambda }^{2}-{C}_{3}}+{C}_{4}{\\lambda }^{2} $$ \"\"\" return np.sqrt( ( wavelength**2 * ( 2 * coefficients[0] + 2 * coefficients[1] + 2 * coefficients[3] * wavelength**2 + 1 ) - coefficients[2] * (2 * coefficients[0] + 2 * coefficients[3] * wavelength**2 + 1) ) / ( coefficients[2] * (coefficients[0] + coefficients[3] * wavelength**2 - 1) - wavelength**2 * (coefficients[0] + coefficients[1] + coefficients[3] * wavelength ** 2 - 1) ) )","title":"formula_8"},{"location":"api/#pyindexrepo.dispersion_formulas.formula_9","text":"Formula 9 dispersion formula from refractiveindex.info The formula has the general form: \\[ {n}^{2}={C}_{1}+\\frac{{C}_{2}}{{\\lambda }^{2}-{C}_{3}}+\\frac{{C}_{4}(\\lambda -{C}_{5})}{{(\\lambda -{C}_{5})}^{2}+{C}_{6}} \\] Parameters: wavelength \u2013 wavelength coefficients \u2013 list of coefficients Source code in pyindexrepo/dispersion_formulas.py @njit( [ float64(float64, float64[:]), float64[:](float64[:], float64[:]), ], cache=True, ) def formula_9(wavelength, coefficients): r\"\"\"Formula 9 dispersion formula from refractiveindex.info The formula has the general form: $$ {n}^{2}={C}_{1}+\\frac{{C}_{2}}{{\\lambda }^{2}-{C}_{3}}+\\frac{{C}_{4}(\\lambda -{C}_{5})}{{(\\lambda -{C}_{5})}^{2}+{C}_{6}} $$ Args: wavelength: wavelength coefficients: list of coefficients \"\"\" return np.sqrt( coefficients[0] + coefficients[1] / (wavelength**2 - coefficients[2]) + coefficients[3] * (wavelength - coefficients[4]) / ((wavelength - coefficients[4]) ** 2 + coefficients[5]) )","title":"formula_9"},{"location":"api/#pyindexrepo.dispersion_formulas.n_absolute_with_given_dndt","text":"Calculates absolute refractive index with given dn/dT Formula (6) of Schott TIE-19 Parameters: n_rel ( float | ndarray ) \u2013 relative refractive index wl ( float | ndarray ) \u2013 wavelength [micron] dT ( float ) \u2013 temperature difference [\u00b0Celsius] coefficient ( float ) \u2013 dn/dT Returns: Source code in pyindexrepo/dispersion_formulas.py @njit(cache=True) def n_absolute_with_given_dndt( n_rel: float | np.ndarray, wl: float | np.ndarray, dT: float, coefficient: float ): \"\"\"Calculates absolute refractive index with given dn/dT Formula (6) of [Schott TIE-19](https://www.schott.com/en-gb/products/optical-glass-p1000267/downloads) Args: n_rel: relative refractive index wl: wavelength [micron] dT: temperature difference [\u00b0Celsius] coefficient: dn/dT Returns: \"\"\" return n_rel + coefficient * dT","title":"n_absolute_with_given_dndt"},{"location":"api/#pyindexrepo.dispersion_formulas.n_air","text":"Refractive index of air Calculates the refractive index of air as described in Schott TIE-19 - Formula (8): Parameters: wl ( float | ndarray ) \u2013 wavelength T ( float , default: 20.0 ) \u2013 air temperature [\u00b0Celsius] P ( float , default: 0.10133 ) \u2013 air pressure [MPa] Returns: \u2013 refractive index of air Source code in pyindexrepo/dispersion_formulas.py @njit(cache=True) def n_air(wl: float | np.ndarray, T: float = 20.0, P: float = 0.10133): \"\"\"Refractive index of air Calculates the refractive index of air as described in [Schott TIE-19](https://www.schott.com/en-gb/products/optical-glass-p1000267/downloads) - Formula (8): Args: wl: wavelength T: air temperature [\u00b0Celsius] P: air pressure [MPa] Returns: refractive index of air \"\"\" n_air_ref = 1.0 + 1e-8 * ( 6432.8 + (2949810.0 * wl**2) / (146.0 * wl**2 - 1.0) + (25540.0 * wl**2) / (41.0 * wl**2 - 1.0) ) return 1.0 + (n_air_ref - 1.0) / (1.0 + 3.4785e-3 * (T - 15.0)) * (P / 0.10133)","title":"n_air"},{"location":"api/#pyindexrepo.dispersion_formulas.relative_to_absolute","text":"Converts relative refractive index to absolute Reverse of Formula (5) of Schott TIE-19 Parameters: n_rel ( float | ndarray ) \u2013 relative refractive index wl ( float | ndarray ) \u2013 wavelength [micron] T ( float , default: 20.0 ) \u2013 Temperature [\u00b0Celsius] P ( float , default: 0.10133 ) \u2013 Pressure [MPa] Returns: Source code in pyindexrepo/dispersion_formulas.py @njit(cache=True) def relative_to_absolute( n_rel: float | np.ndarray, wl: float | np.ndarray, T: float = 20.0, P: float = 0.10133, ): \"\"\"Converts relative refractive index to absolute Reverse of Formula (5) of [Schott TIE-19](https://www.schott.com/en-gb/products/optical-glass-p1000267/downloads) Args: n_rel: relative refractive index wl: wavelength [micron] T: Temperature [\u00b0Celsius] P: Pressure [MPa] Returns: \"\"\" return n_rel * n_air(wl, T, P)","title":"relative_to_absolute"}]}